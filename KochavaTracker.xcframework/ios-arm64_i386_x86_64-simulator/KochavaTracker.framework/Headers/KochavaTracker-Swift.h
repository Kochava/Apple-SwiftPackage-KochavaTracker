#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef KOCHAVATRACKER_SWIFT_H
#define KOCHAVATRACKER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppTrackingTransparency;
@import Foundation;
@import JavaScriptCore;
@import KochavaCore;
@import ObjectiveC;
#endif

#import <KochavaTracker/KochavaTracker.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KochavaTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class KVAContext;
@class KVANetworking;
@class NSDate;
@protocol KVAMutable;
@class KVAEvent;
@protocol KVAAsForContextProtocol;
@class KVAAdNetworkConversion;

/// A feature which interfaces with Apple’s SKAdNetwork attribution system.
SWIFT_CLASS_NAMED("KVAAdNetwork")
@interface KVAAdNetwork : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)configureWithNetworking:(KVANetworking * _Nonnull)networking measurementWindowStartDate:(NSDate * _Nullable)measurementWindowStartDate delegate:(id <KVAMutable> _Nullable)delegate;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (id <KVAAsForContextProtocol, KVAFromProtocol> _Nullable)eventNetTransactionWillStartRequestWithNoAdNetworkConversionResult:(KVAEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (void)invalidate;
/// A closure which is called when the SKAdNetwork registerAppForAdNetworkAttribution API has been called.
/// Your code should assume that if some action needs to be performed on the main queue that it should first dispatch asynchronously to it.
@property (nonatomic, copy) void (^ _Nullable didRegisterAppForAttributionBlock)(KVAAdNetwork * _Nonnull);
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// The current conversion information.
@property (nonatomic, strong) KVAAdNetworkConversion * _Nonnull conversion;
@end

@class KVAAdNetworkConversionResult;

/// A feature which determines adnetwork conversion(s).
SWIFT_CLASS_NAMED("KVAAdNetworkConversion")
@interface KVAAdNetworkConversion : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A closure which is called when the SKAdNetwork updateConversionValue API has been called.
/// Your code should assume that if some action needs to be performed on the main queue that it should first dispatch asynchronously to it.
@property (nonatomic, copy) void (^ _Nullable didUpdateValueBlock)(KVAAdNetworkConversion * _Nonnull, KVAAdNetworkConversionResult * _Nonnull);
/// The current conversion result.
/// This object will mutate when the current result is updated.  If you want a immutable picture then you should take a copy.
@property (nonatomic, strong) KVAAdNetworkConversionResult * _Nonnull result;
@end


/// A class which defines an adnetwork conversion event.
SWIFT_CLASS_NAMED("KVAAdNetworkConversionEvent")
@interface KVAAdNetworkConversionEvent : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class NSNumber;

/// The adnetwork conversion result.
SWIFT_CLASS_NAMED("KVAAdNetworkConversionResult")
@interface KVAAdNetworkConversionResult : NSObject <NSCopying, KVAConfigureWithProtocol, KVAFromProtocol, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Return the conversion value integer which is used with the SKAdNetwork updateConversionValue API.
/// Apple currently restricts this value to 6-bits.  This is a combination (OR) of the translated value (translatedValueIntNumber) with any extension interval value (extensionIntervalTranslatedValueInt.integerValue).
- (NSInteger)valueInt SWIFT_WARN_UNUSED_RESULT;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A string which represents the model used for the conversion.
@property (nonatomic, readonly, copy) NSString * _Nullable modelString;
@property (nonatomic, readonly, strong) NSNumber * _Nullable translatedValueIntNumber;
/// A number representing the raw value.
/// This is a raw value which has not had any translations applied yet.  This also does not include any extension interval value (extensionIntervalTranslatedValueInt).
@property (nonatomic, strong) NSNumber * _Nullable rawValueNumber;
@end


/// A feature which provides measurement for App Clips.
SWIFT_CLASS_NAMED("KVAAppClips")
@interface KVAAppClips : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which may be used to limit advertising tracking from the level of the application (or host).
SWIFT_CLASS_NAMED("KVAAppLimitAdTracking")
@interface KVAAppLimitAdTracking : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A boolean which indicates if you want to limit ad tracking at the application level.
/// This feature is related to the Limit Ad Tracking feature which is typically found on an Apple device under Settings, Privacy, Advertising.  In the same way that you can limit ad tracking through that setting, this feature provides a second and independent means for the host app to limit ad tracking by asking the user directly.  A value of true from either this feature or Apple’s will result in the limiting of ad tracking.
@property (nonatomic) BOOL boolean;
@end


/// A feature which interfaces with Apple’s App Tracking Transparency system.
SWIFT_CLASS_NAMED("KVAAppTrackingTransparency")
@interface KVAAppTrackingTransparency : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Notify that a request for tracking authorization did complete.
/// \param authorizationStatus The provided authorization status.
///
- (void)authorizationDidCompleteWithStatus:(ATTrackingManagerAuthorizationStatus)authorizationStatus SWIFT_AVAILABILITY(ios_app_extension,introduced=14.0) SWIFT_AVAILABILITY(tvos,introduced=14.0) SWIFT_AVAILABILITY(maccatalyst,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A boolean which indicates if the instance should automatically request tracking authorization.
/// Default true.  Subject to server-based override.  Also subject to enabledBool.  See enabledBool.
@property (nonatomic) BOOL autoRequestTrackingAuthorizationBool;
/// A time interval to wait for the request for tracking authorization before proceeding to send the install.
/// Default 30.0.  Subject to server-based override.  This provides time to wait to obtain the authorization necessary to collect the IDFA.
@property (nonatomic) NSTimeInterval authorizationStatusWaitTimeInterval;
@property (nonatomic) BOOL enabledBool;
/// The authorization status expressed as an NSString.
/// This is optional and will be nil until a status is known.  For this reason this can be checked as a means of determining if a status has been determined.  Current possible values:  “authorized”, “denied”, “notDetermined”, “restricted”, “unknown”.
@property (nonatomic, readonly, copy) NSString * _Nullable authorizationStatusString;
@end


/// A feature which interfaces with Apple Search Ads.
SWIFT_CLASS_NAMED("KVAAppleSearchAds")
@interface KVAAppleSearchAds : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Configure the instance for use.
/// \param networking An instance of class KVANetworking.
///
/// \param delegate A delegate.
///
- (void)configureWithNetworking:(KVANetworking * _Nonnull)networking delegate:(id <KVAMutable> _Nonnull)delegate;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for attribution through Apple’s Apple Search Ads method 2.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod2")
@interface KVAAppleSearchAdsMethod2 : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator>
+ (nonnull instancetype)appleSearchAdsMethod2Attribution SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Apple’s attribution as provided by Apple Search Ads method 2.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod2Attribution")
@interface KVAAppleSearchAdsMethod2Attribution : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for attribution through Apple’s Apple Search Ads method 3.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod3")
@interface KVAAppleSearchAdsMethod3 : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Apple’s attribution as provided by Apple Search Ads method 3.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod3Attribution")
@interface KVAAppleSearchAdsMethod3Attribution : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KVAAttributionResult;

/// A feature which provides attribution information related to the install.
SWIFT_CLASS_NAMED("KVAAttribution")
@interface KVAAttribution : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Get the attribution result with a completion handler.
/// \param completionHandler A completion handler to call once the result has been retrieved.
///
- (void)retrieveResultWithCompletionHandler:(void (^ _Nonnull)(KVAAttributionResult * _Nonnull))completionHandler;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A closure which is called when attribution is retrieved.
@property (nonatomic, copy) void (^ _Nullable closure_didRetrieveResult)(KVAAttribution * _Nonnull, KVAAttributionResult * _Nonnull);
/// A boolean indicating if an attribution result should be retrieved.
/// This boolean does not need to be set if you are using func <code>retrieveResult(withCompletionHandler:)</code> to retrieve the attribution result.  It needs to be set if you intend to set var <code>closure_didRetrieveResult-swift.property</code> and then wait for it to be called.
@property (nonatomic) BOOL retrieveResultBool;
/// The current attribution result.
/// When accessed this property will contain whatever value may have been previously collected.  For a current value which may initiate new asynchronous collection see func <code>retrieveResult(withCompletionHandler:)</code>
@property (nonatomic, readonly, strong) KVAAttributionResult * _Nonnull result;
@end


/// The attribution result.
SWIFT_CLASS_NAMED("KVAAttributionResult")
@interface KVAAttributionResult : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// A boolean indicating if the result attributed the install.
@property (nonatomic, readonly) BOOL attributedBool;
/// A boolean indicating if the current install is the first install.
@property (nonatomic, readonly) BOOL firstInstallBool;
/// A dictionary containing the raw result information.
@property (nonatomic, readonly, copy) NSDictionary * _Nullable rawDictionary;
/// A boolean indicating if the result was successfully retrieved.
@property (nonatomic, readonly) BOOL retrievedBool;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which is responsible for custom identifiers.
/// Register a custom identifier by calling func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
SWIFT_CLASS_NAMED("KVACustomIdentifiers")
@interface KVACustomIdentifiers : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Register a custom identifier.
/// In order to send a custom identifier it must be whitelisted on your account.
/// \param nameString The name of the identifier.
///
/// \param identifierString The identifier.
///
- (void)registerWithNameString:(NSString * _Nonnull)nameString identifierString:(NSString * _Nonnull)identifierString;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class NSURL;
@protocol KVADeeplinksProcessorProvider;

/// A deeplink.
SWIFT_CLASS_NAMED("KVADeeplink")
@interface KVADeeplink : NSObject <KVAFromProtocol>
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param timeoutTimeInterval A time interval after which to timeout and return whatever result we have.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param processor An array of KVADeeplinksProcessorProvider to which to add the token.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url processor:(id <KVADeeplinksProcessorProvider> _Nullable)processor completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param timeoutTimeInterval A time interval after which to timeout and return whatever result we have.
///
/// \param processor An array of KVADeeplinksProcessorProvider to which to add the token.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval processor:(id <KVADeeplinksProcessorProvider> _Nullable)processor completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The deeplink url as provided by the operating system.
@property (nonatomic, copy) NSString * _Nullable urlString;
/// The destination for the deeplink.
@property (nonatomic, copy) NSString * _Nullable destinationString;
/// A dictionary containing raw information about the deeplink.
@property (nonatomic, copy) NSDictionary * _Nullable rawDictionary;
@end


SWIFT_PROTOCOL("_TtP14KochavaTracker21KVADeeplinksProcessor_")
@protocol KVADeeplinksProcessor
/// Process a deeplink.
/// \param deeplink An instance of KVADeeplink.
///
/// \param timeoutTimeInterval A timeout time interval.
///
/// \param completionHandler A completion handler to call when processing is complete.
///
- (void)processDeeplink:(KVADeeplink * _Nonnull)deeplink timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
@end


/// A feature which measures deeplink activity.
/// Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
SWIFT_CLASS_NAMED("KVADeeplinks")
@interface KVADeeplinks : NSObject <NSCopying, KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVADeeplinksProcessor>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Process a deeplink.
/// \param deeplink An instance of KVADeeplink.
///
/// \param timeoutTimeInterval A timeout time interval.
///
/// \param completionHandler A completion handler to call when processing is complete.
///
- (void)processDeeplink:(KVADeeplink * _Nonnull)deeplink timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end



SWIFT_PROTOCOL("_TtP14KochavaTracker29KVADeeplinksProcessorProvider_")
@protocol KVADeeplinksProcessorProvider
/// A property which conforms to protocol KVADeeplinksProcessor.
@property (nonatomic, readonly, strong) id <KVADeeplinksProcessor> _Nullable deeplinksProcessor;
@end


/// A feature which is responsible for the identification of a device.
/// The managed id is referred to as the <em>Kochava Device Id</em>.  Get the Kochava Device Id by getting var <code>string</code>.
SWIFT_CLASS_NAMED("KVADeviceId")
@interface KVADeviceId : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)kva_didMutate_performSideEffectsWithChildObject:(id _Nullable)childObject infoDictionary:(NSDictionary * _Nullable)infoDictionary;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A property containing the unique device ID that was generated when the tracker was first initialized on the current install.
@property (nonatomic, readonly, copy) NSString * _Nullable string;
@end

@class KVAEventType;
@protocol KVAEventSenderProvider;
@class KVAConsent;
@class NSDecimalNumber;

/// The class KVAEvent provides a means of defining a post-install event, providing standardized parameters.
/// Sending events is not required.  To track installation information, you do not need to do anything more than to start a tracker.  Still, many advertisers want to understand and correlate the relationship between conversion and attribution source information with user activity.  This can only be done by tracking events.
/// Events can be sent from anywhere within the application.  Events will be coupled with device datapoints and general application information.  If they cannot be sent immediately to Kochava they will be queued and retried later.
/// The KVAEvent class defines an individual event, providing a variety of standardized event types and parameters.  Standard event types may represent a purchase, the completion of a level, an achievement, etc.  Standard parameters may represent a currency, price, level, etc.
/// The use of standard event types and parameters maximizes parity with external analytics partners and ensures optimal reporting and analytical output via the Kochava platform.  If the data you are sending in events can be sent using standard event types and parameters we recommend you do so.
SWIFT_CLASS_NAMED("KVAEvent")
@interface KVAEvent : NSObject <KVAFromProtocol>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (KVAEvent * _Nonnull)eventWithType:(KVAEventType * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
+ (KVAEvent * _Nonnull)eventWithTypeNameString:(NSString * _Nonnull)typeNameString SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Send the event using the default KVAEventSenderProvider.
/// The default is the shared instance of class <code>KVATracker</code>.
- (void)send;
/// Send the event with a specified array of KVAEventSenderProvider(s).
- (void)sendWithSenderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderProviderArray;
/// Return a string representation of the name of the event.
/// a.k.a.  “event_name”
- (NSString * _Nonnull)eventNameString SWIFT_WARN_UNUSED_RESULT;
/// Return any valueObject for a given propertyIdentifierString.
/// \param propertyIdentifierString A string which generally would be equivalent to the name of the key of the property as it would appear in the event payload.
///
- (id _Nullable)valueObjectForPropertyIdentifierString:(NSString * _Nullable)propertyIdentifierString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)subURLIdString SWIFT_WARN_UNUSED_RESULT;
/// An ad network conversion result.
/// Qualifying events are ammended with this property just prior to starting a send request.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic, strong) id <KVAAsForContextProtocol, KVAFromProtocol> _Nullable adNetworkConversionResult;
/// A type for the event
/// Although these types are standardized, custom events are designated using type .custom.
@property (nonatomic, readonly, strong) KVAEventType * _Nonnull eventType;
/// A boolean indicating if a dispatch should occur when the event is sent.
/// Default true.  The default behavior dispatches the sending of an event to the default queue that should be used when sending the event (i.e. KVADispatchQueue.globalSerial).  If it is known that you are already on the appropriate queue, you may set this to true to avoid an additional dispatch.  This can have the effect of fine tuning behavior to ensure that related operations essentially occur atomically.  It is important to not use this feature if you are not on the appropriate queue already.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic) BOOL sendDispatchBool;
/// A boolean indicating if a LogMessage should be printed when the event is sent.
/// Default true.  The default behavior prints a log message when the event is sent.  The corresponding log message is presented as though the event was sent by a call from the host.  This boolean can be set to false so that the event will be sent silently, and not appear as though it was sent by a call the host.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic) BOOL sendPrintLogMessageBool;
/// A boolean which when set will cause the event to be serviced locally when sent.
/// When serviced locally the response for the request is provided locally and the request is post the event to the server is never made.  In every other respect the effects are the same.  AdNetwork conversion information is still calculated.
@property (nonatomic) BOOL serviceLocallyBool;
/// A property containing an action string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable actionString;
/// A property containing an ad campaign identifier string.
/// This is expected to contain a string corresponding to an ad campaign identifier.
@property (nonatomic, copy) NSString * _Nullable adCampaignIdString;
/// A property containing an ad campaign name string.
/// This is expected to contain a string corresponding to an ad campaign name.
@property (nonatomic, copy) NSString * _Nullable adCampaignNameString;
/// A property containing an ad device type string.
/// This is expected to contain a string corresponding to a device type.
@property (nonatomic, copy) NSString * _Nullable adDeviceTypeString;
/// A property containing an ad group identifier string.
/// This is expected to contain a string corresponding to an ad group identifier.
@property (nonatomic, copy) NSString * _Nullable adGroupIdString;
/// A property containing an ad group name string.
/// This is expected to contain a string corresponding to an ad group name.
@property (nonatomic, copy) NSString * _Nullable adGroupNameString;
/// A property containing an ad mediation network name string.
/// This is expected to contain a standardized string corresponding to an advertising network.  It is the name of the network that was used during mediation.
@property (nonatomic, copy) NSString * _Nullable adMediationNameString;
/// A property containing an ad network name string.
/// This is expected to contain a standardized string corresponding to an advertising network.
@property (nonatomic, copy) NSString * _Nullable adNetworkNameString;
/// A property containing an ad placement string.
/// This is expected to contain a string corresponding to an ad placement, ad unit, etc.
@property (nonatomic, copy) NSString * _Nullable adPlacementString;
/// A property containing an ad size string.
/// This is expected to contain a string corresponding to an ad size.
@property (nonatomic, copy) NSString * _Nullable adSizeString;
/// A property containing an ad type string.
/// This is expected to contain a string corresponding to an ad type.
@property (nonatomic, copy) NSString * _Nullable adTypeString;
/// A boolean indicating that this event originated from an Apple Watch.
@property (nonatomic) BOOL appleWatchBool;
/// A string containing a unique identifier associated with the Apple Watch from which this event originated.
/// Optional.  You may set this property in addition to appleWatchBool if you have a unique identifier associated with the watch.
@property (nonatomic, copy) NSString * _Nullable appleWatchIdString;
/// A property containing an App Store receipt which has been converted into a base64 encoded string.
/// The format of the information is expected to be that which is provided by the main bundle’s appStoreReceiptURL method, the data of which being loaded and base-64-string-encoded.
@property (nonatomic, copy) NSString * _Nullable appStoreReceiptBase64EncodedString;
/// A property containing a boolean wrapped in an NSNumber which indicates that something is background.
/// This is expected to contain a boolean which indicates if something is background, or occurred while in the background.  This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable backgroundBoolNumber;
/// A property indicating whether a checkout took place as a guest.
/// This is generally taken to be a boolean, but it is passed as a string so that you can provide more than two states.  Suggested values are “true” and “false”, but can also be values such as “yes”, “no”, or “partial”.
@property (nonatomic, copy) NSString * _Nullable checkoutAsGuestString;
/// A property containing a boolean wrapped in an NSNumber which indicates that something is completed.
/// This is expected to contain a boolean which indicates if something is completed.  This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable completedBoolNumber;
/// An instance of KVAConsent.
@property (nonatomic, strong) KVAConsent * _Nullable consent;
/// A property containing a content identifier string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable contentIdString;
/// A property containing a content type string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable contentTypeString;
/// A property containing a currency type string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable currencyString;
/// A property containing a custom event name string.
/// Standardized event names are automatically determined from the event type enum.  If an appropriate event type is not present, you may set the event type to KVAEventType.custom and the customEventNameString property to your custom event name string.  Event names do not need to be pre-registered.  They can be any alphanumeric string value which does not begin with an underscore.  NOTE: Prepending an event name with an underscore is a convention reserved for Kochava system events. (i.e. _INSTALL)
@property (nonatomic, copy) NSString * _Nullable customEventNameString;
/// A property containing a date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable date;
/// A property containing a date string.  “dateString” can be used as an alternate to “date” when a specific date format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable dateString;
/// A property containing a description.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable descriptionString;
/// A property containing a destination.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable destinationString;
/// A property that contains a duration.  It is a time interval that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable durationTimeIntervalNumber;
/// A property that contains an end date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable endDate;
/// A property that contains an end date.  “endDateString” can be used as an alternate to “endDate” when a specific date format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable endDateString;
/// A property containing an informational dictionary of key/value pairs.
/// A information dictionary.  The keys and values can be any alphanumeric string value.  This field has an entirely generic quality, in that it can contain whatever you consider to be fitting value.  The dictionary should not contain sub-dictionaries.
@property (nonatomic, copy) NSDictionary * _Nullable infoDictionary;
/// A property containing an informational string.
/// A informational string.  This can be any alphanumeric string value.  This field has an entirely generic quality, in that it can contain whatever you consider to be fitting value.
/// If the string passed is all numeric (and may include a decimal point), Kochava will automatically sum the amounts passed for the same nameString.  For example, if you sent the purchase amount of in-app purchases in infoString and named nameString “IAP – Purchase Price”, Kochava would add up all the purchase amounts for you and present them as a total for “IAP – Purchase Price”.  Regardless of what is passed in infoString, Kochava’s user dashboard will let you access all the data passed in infoString for any nameString, and present a count of all times an event was sent passing any given nameString.
/// NOTE: If you pass a string of JSON represented data, only the root level (no nested chunks) is stored.  Also, a limit of 75 characters is applied for a non-JSON-decodable string passed as an event infoString.
@property (nonatomic, copy) NSString * _Nullable infoString;
/// A property that contains an indication of where an item as added from.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable itemAddedFromString;
/// A property that contains a level.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable levelString;
/// A property that contains a maximum rating value.  It is a double that is wrapped in an NSNumber.  This property is used in conjunction with ratingValueDoubleNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable maxRatingValueDoubleNumber;
/// A property that contains a name.  It can be a human name or the name of any other item type.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  It can be a person’s name or the name of any other object.
@property (nonatomic, copy) NSString * _Nullable nameString;
/// A property that contains an order id.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable orderIdString;
/// A property that contains an origin.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable originString;
/// A property that contains a payload in the form of a dictionary.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDictionary * _Nullable payloadDictionary;
/// A property that contains a price.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  Because it uses an NSDecimalNumber, it is better suited for preserving decimal precision than priceDoubleNumber.  priceDecimalNumber and priceDoubleNumber share the same key when sent to the server.  If both are set, the value within priceDecimalNumber will win.
@property (nonatomic, strong) NSDecimalNumber * _Nullable priceDecimalNumber;
/// A property that contains a price.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  In order to better preserve decimal precision, see priceDecimalNumber.  priceDecimalNumber and priceDoubleNumber share the same key when sent to the server.  If both are set, the value within priceDecimalNumber will win.
@property (nonatomic, strong) NSNumber * _Nullable priceDoubleNumber;
/// A property that contains a quantity.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable quantityDoubleNumber;
/// A property that contains a rating value.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable ratingValueDoubleNumber;
/// A property that contains a receipt id.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable receiptIdString;
/// A property that contains where something was referred from.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable referralFromString;
/// A property that contains a registration method.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable registrationMethodString;
/// A property that contains results.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable resultsString;
/// A property that contains a score.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable scoreString;
/// A property that contains a search term (or terms).  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable searchTermString;
/// A property that contains a source string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable sourceString;
/// A property that contains a spatial coordinate’s x value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialXDoubleNumber;
/// A property that contains a spatial coordinate’s y value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialYDoubleNumber;
/// A property that contains a spatial coordinate’s z value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialZDoubleNumber;
/// A property that contains a start date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable startDate;
/// A property that contains a start date.  “startDateString” is a string that can be used as an alternate to “startDate” when a specific display format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable startDateString;
/// A property that contains a success string.  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable successString;
/// A property that contains a user id.  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable userIdString;
/// A property that contains a URI (or URL) string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable uriString;
/// A property that contains a username.  This is intended to be used to store an account-syle username, as opposed to a user’s name (compare “nameString”).  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable userNameString;
/// A property that contains a validated string.  It is a string that is intended to contain a boolean-like value, such as “true” or “false”.  It can also contain other  custom values such as “partial”.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable validatedString;
@end


@interface KVAEvent (SWIFT_EXTENSION(KochavaTracker)) <JSExport>
@end


@interface KVAEvent (SWIFT_EXTENSION(KochavaTracker))
/// Create an instance of class KVAEvent which has a customEventNameString, and then send it.
/// \param customEventNameString A string containing the event name.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString;
/// Create an instance of class KVAEvent which has a customEventNameString, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoDictionary, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoDictionary, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoString, and then send it.
/// \param customEventNameString A string containing event name.
///
/// \param infoString An info string.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoString, and then send it.
/// \param customEventNameString A string containing event name.
///
/// \param infoString A custom string.  It may be an unnested (single dimensional) dictionary converted to a JSON formatted string.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
/// \param infoString An info string.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
/// \param infoString An info string.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("KVAEventSender")
@protocol KVAEventSender
/// Send an event from the device to the appropriate server(s).
/// \param event A KVAEvent configured with the values you want to associate with the event.
///
- (void)sendEvent:(KVAEvent * _Nonnull)event;
@end


SWIFT_PROTOCOL_NAMED("KVAEventSenderProvider")
@protocol KVAEventSenderProvider
/// A property which conforms to protocol KVAEventSender.
@property (nonatomic, readonly, strong) id <KVAEventSender> _Nonnull eventSender;
@end


/// A class which defines an event type.
SWIFT_CLASS_NAMED("KVAEventType")
@interface KVAEventType : NSObject <KVAFromProtocol>
/// An event type which signifies that an item was added to a cart.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull addToCart;)
+ (KVAEventType * _Nonnull)addToCart SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was added to a wish list.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull addToWishList;)
+ (KVAEventType * _Nonnull)addToWishList SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an achievement was achieved.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull achievement;)
+ (KVAEventType * _Nonnull)achievement SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a checkout was started.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull checkoutStart;)
+ (KVAEventType * _Nonnull)checkoutStart SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a customEventNameString will be supplied.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull custom;)
+ (KVAEventType * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a level was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull levelComplete;)
+ (KVAEventType * _Nonnull)levelComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a purchase was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull purchase;)
+ (KVAEventType * _Nonnull)purchase SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was rated.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull rating;)
+ (KVAEventType * _Nonnull)rating SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a registration was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull registrationComplete;)
+ (KVAEventType * _Nonnull)registrationComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a search was performed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull search;)
+ (KVAEventType * _Nonnull)search SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a tutorial was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull tutorialComplete;)
+ (KVAEventType * _Nonnull)tutorialComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was viewed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull view;)
+ (KVAEventType * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an ad was viewed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull adView;)
+ (KVAEventType * _Nonnull)adView SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a push notification was received.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull pushReceived;)
+ (KVAEventType * _Nonnull)pushReceived SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a push notification was opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull pushOpened;)
+ (KVAEventType * _Nonnull)pushOpened SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that consent was granted.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull consentGranted;)
+ (KVAEventType * _Nonnull)consentGranted SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that there was a deep link.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull deeplink;)
+ (KVAEventType * _Nonnull)deeplink SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an ad was clicked.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull adClick;)
+ (KVAEventType * _Nonnull)adClick SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a trial was started.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull startTrial;)
+ (KVAEventType * _Nonnull)startTrial SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that there was a subscription.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull subscribe;)
+ (KVAEventType * _Nonnull)subscribe SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The name.
/// Examples:  “Add to Cart”, “Add to Wish List”, “Achievement”, etc.
@property (nonatomic, readonly, copy) NSString * _Nonnull nameString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which tracks user behavior and actions beyond the install.
SWIFT_CLASS_NAMED("KVAEvents")
@interface KVAEvents : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAEventSender>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)sendEvent:(KVAEvent * _Nonnull)event;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for linking identities.
/// Register an identity link using class func <code>register(withNameString:identifierString:)</code>.
SWIFT_CLASS_NAMED("KVAIdentityLink")
@interface KVAIdentityLink : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Register an identity link.
/// note:
/// When used, and when possible, this method should be called before (or as soon as possible after) the tracker is started.  This helps to ensure that your identity values are associated with your install.
/// \param nameString The name of the identifier.
///
/// \param identifierString The identifier.
///
- (void)registerWithNameString:(NSString * _Nonnull)nameString identifierString:(NSString * _Nonnull)identifierString;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which provides information about the install.
/// The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>KVATracker/config</code>.
SWIFT_CLASS_NAMED("KVAInstall")
@interface KVAInstall : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// The date that the install did start first.
/// This will be nil until the first time that the start function for the tracker has executed.
@property (nonatomic, copy) NSDate * _Nullable didStartFirstDate;
@end

@class KVAPrivacyProfile;

SWIFT_PROTOCOL_NAMED("KVAPrivacyProfileRegistrar")
@protocol KVAPrivacyProfileRegistrar
- (void)registerProfile:(KVAPrivacyProfile * _Nonnull)profile;
@end


/// A feature which is responsible for privacy.
/// Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
SWIFT_CLASS_NAMED("KVAPrivacy")
@interface KVAPrivacy : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAPrivacyProfileRegistrar>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Register a profile.
/// \param profile The profile to register.
///
- (void)registerProfile:(KVAPrivacyProfile * _Nonnull)profile;
/// Set a boolean indicating if the specified profile name is enabled.
/// See method register(profile:).
/// \param profileNameString The name of a profile.
///
/// \param enabledBool A boolean indicating if enabled.
///
- (void)setEnabledBoolForProfileNameString:(NSString * _Nonnull)profileNameString enabledBool:(BOOL)enabledBool;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@protocol KVAPrivacyProfileRegistrarProvider;

/// A privacy profile.
SWIFT_CLASS_NAMED("KVAPrivacyProfile")
@interface KVAPrivacyProfile : NSObject <KVAFromProtocol>
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacy profile.
///
/// \param payloadKeyStringArray An array of payload keys (datapoint identifiers).
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray;
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacy profile.
///
/// \param payloadKeyStringArray An array of payload keys (datapoint identifiers).
///
/// \param registrarArray An array of KVAPrivacyProfileRegistrarProvider to which to register the privacy profile.
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray registrarArray:(NSArray<id <KVAPrivacyProfileRegistrarProvider>> * _Nullable)registrarArray;
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacyProfile.
///
/// \param payloadKeyStringArray An array of datapoint identifiers.
///
/// \param payloadIdStringArray An array of payload identifiers.
///
/// \param registrarArray An array of KVAPrivacyProfileRegistrarProvider to which to register the KVAPrivacyProfile.
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray payloadIdStringArray:(NSArray<NSString *> * _Nullable)payloadIdStringArray registrarArray:(NSArray<id <KVAPrivacyProfileRegistrarProvider>> * _Nullable)registrarArray;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// A unique name string.
@property (nonatomic, readonly, copy) NSString * _Nonnull nameString;
/// An array of payload keys (datapoint identifiers).
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable payloadKeyStringArray;
/// An array of payload identifiers (network transaction types).
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable payloadIdStringArray;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("KVAPrivacyProfileRegistrarProvider")
@protocol KVAPrivacyProfileRegistrarProvider
/// A property which conforms to protocol KVAPrivacyProfileRegistrar.
@property (nonatomic, readonly, strong) id <KVAPrivacyProfileRegistrar> _Nonnull privacyProfileRegistrar;
@end

@class KVAPushNotificationsToken;

SWIFT_PROTOCOL("_TtP14KochavaTracker34KVAPushNotificationsTokenRegistrar_")
@protocol KVAPushNotificationsTokenRegistrar
- (void)registerToken:(KVAPushNotificationsToken * _Nonnull)token;
@end


/// A feature which provides for the measurement of push notifications.
/// Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
SWIFT_CLASS_NAMED("KVAPushNotifications")
@interface KVAPushNotifications : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable, KVAPushNotificationsTokenRegistrar>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)registerToken:(KVAPushNotificationsToken * _Nonnull)token;
- (void)invalidate;
/// A boolean indicating if push notifications is enabled.
@property (nonatomic) BOOL enabledBool;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class NSData;
@protocol KVAPushNotificationsTokenRegistrarProvider;

/// A push notifications token.
SWIFT_CLASS_NAMED("KVAPushNotificationsToken")
@interface KVAPushNotificationsToken : NSObject <KVAFromProtocol>
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenData The device token as provided in Data.
///
+ (void)registerWithData:(NSData * _Nonnull)deviceTokenData;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenDataHexString The device token as provided as a data hex string.
///
+ (void)registerWithDataHexString:(NSString * _Nonnull)deviceTokenDataHexString;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenData The device token as provided in Data.
///
/// \param registrarArray An array of KVAPushNotificationsTokenRegistrarProvider to which to add the token.
///
+ (void)registerWithData:(NSData * _Nonnull)deviceTokenData registrarArray:(NSArray<id <KVAPushNotificationsTokenRegistrarProvider>> * _Nullable)registrarArray;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenDataHexString The device token as provided as a data hex string.
///
/// \param registrarArray An array of KVAPushNotificationsTokenRegistrarProvider to which to add the token.
///
+ (void)registerWithDataHexString:(NSString * _Nonnull)deviceTokenDataHexString registrarArray:(NSArray<id <KVAPushNotificationsTokenRegistrarProvider>> * _Nullable)registrarArray;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The token data as provided by the operating system.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The date that the token was provided by the operating system.
@property (nonatomic, readonly, copy) NSDate * _Nullable providedDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP14KochavaTracker42KVAPushNotificationsTokenRegistrarProvider_")
@protocol KVAPushNotificationsTokenRegistrarProvider
/// A property which conforms to protocol KVAPushNotificationsTokenRegistrar.
@property (nonatomic, readonly, strong) id <KVAPushNotificationsTokenRegistrar> _Nonnull pushNotificationsTokenRegistrar;
@end


/// A class which encapsulates a session.
SWIFT_CLASS_NAMED("KVASession")
@interface KVASession : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_didMutate_performSideEffectsWithChildObject:(id _Nullable)childObject infoDictionary:(NSDictionary * _Nullable)infoDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for the measurement of sessions.
SWIFT_CLASS_NAMED("KVASessions")
@interface KVASessions : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class KVATrackerConfig;

/// The class KVATracker provides an interface between a host application and Kochava’s Attribution and Measurement servers.
/// The class KVATracker is the main interface for module KochavaTracker.  A tracker manages the exchange of data between the client and server, along with the associated tasks and network transactions.  If you have not already integrated the KochavaTracker SDK into your project, refer to our KochavaTracker iOS SDK support documentation.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// From there, the tracker proceeds to start and perform its various tasks.  This is typically done during the earliest phases of the host’s lifecycle, so that installation attribution can be quickly established and post-install events may begin to egress.
/// You may alternately create an instance.  If you do, it is your responsibility to maintain a strong reference.  And if you create multiple instances, it is your responsibility to configure each with a unique storageIdentifierString.
/// <h2>Examples</h2>
/// Example - Starting the shared instance using func <code>start(withAppGUIDString:)</code>:
/// \code
/// KVATracker.shared.start(withAppGUIDString: "_YOUR_APP_GUID_")
///
/// \endcode<h2>Features</h2>
/// <ul>
///   <li>
///     <em>Ad Network</em> (var <code>adNetwork</code>) — A feature which interfaces with Apple’s SKAdNetwork attribution system.  See class <code>KVAAdNetwork</code>.
///   </li>
///   <li>
///     <em>App Clips</em> (var appClips) — A feature which provides measurement for App Clips.  Implemented in internal class KVAAppClips.
///   </li>
///   <li>
///     <em>Apple Search Ads</em> (var appleSearchAds ) — A feature which interfaces with Apple Search Ads.  Implemented in internal class KVAAppleSearchAds.
///   </li>
///   <li>
///     <em>App Limit Ad Tracking</em> (var <code>appLimitAdTracking</code>) — A feature which may be used to limit advertising tracking from the level of the application (or host).  See class <code>KVAAppLimitAdTracking</code>.
///   </li>
///   <li>
///     <em>App Tracking Transparency</em> (var <code>appTrackingTransparency</code>) — A feature which interfaces with Apple’s App Tracking Transparency system.  See class <code>KVAAppTrackingTransparency</code>.
///   </li>
///   <li>
///     <em>Attribution</em> (var <code>attribution</code>) — A feature which provides attribution information related to the install.  See class <code>KVAAttribution</code>.
///   </li>
///   <li>
///     <em>Config</em> (var <code>config</code>) — A feature which is responsible for controlling and updating the configuration of the tracker.  This feature interfaces with Kochava’s servers to provide a server-based configuration.  This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.  See class <code>KVATrackerConfig</code>.
///   </li>
///   <li>
///     <em>Consent</em> (var <code>consent</code>) — A feature which serves as an authority related to consent for the sharing of personal data.  See class KVAConsent in module KochavaCore.
///   </li>
///   <li>
///     <em>Crash Reporting</em> (var crashReporting) — A feature which can be used to report crashes.  Implemented in class KVACrashReporting.  Note:  This feature is not being compiled into the SDK at this time.  Please enquire with your Kochava client success manager if you are interested in this feature.
///   </li>
///   <li>
///     <em>Custom Identifiers</em> (var <code>customIdentifiers</code>) — A feature which is responsible for custom identifiers.  See class <code>KVACustomIdentifiers</code>.  Register a custom identifier by calling func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
///   </li>
///   <li>
///     <em>Datapoints</em> (var dataPoints) — A feature which is responsible for the collection of datapoints.  Datapoints provide insights about the device at the times when events are generated.  Implemented in internal class KVATrackerDataPoints.
///   </li>
///   <li>
///     <em>Deeplinks</em> (var <code>deeplinks</code>) — A feature which measures deeplink activity.  See class <code>KVADeeplinks</code>.  Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
///   </li>
///   <li>
///     <em>Device Id</em> (var <code>deviceId</code>) — A feature which is responsible for the identification of a device.  The managed id is referred to as the <em>Kochava Device Id</em>.  See class <code>KVADeviceId</code>.  Get the Kochava Device Id by getting class <code>KVADeviceId</code> var <code>KVADeviceId/string</code>.
///   </li>
///   <li>
///     <em>Events</em> (var <code>events</code>) — A feature which tracks user behavior and actions beyond the install.  See class <code>KVAEvents</code>.  Create and send events using any of the methods available in class <code>KVAEvent</code>.
///   </li>
///   <li>
///     <em>General</em> (var <code>general</code>) — A feature which encapsulates all of the general aspects of a tracker not belonging to any other encapsulated features.  Implemented in internal class <code>KVATrackerGeneral</code>.
///   </li>
///   <li>
///     <em>Identity Link</em> (var <code>identityLink</code>) — A feature which is responsible for linking identities.  See class <code>KVAIdentityLink</code>.  Register an identity link by calling class <code>KVAIdentityLink</code> func <code>KVAIdentityLink/register(withNameString:identifierString:)</code>.
///   </li>
///   <li>
///     <em>Install</em> (var <code>install</code>) — A feature which provides information about the install.  The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>config</code>.  See class <code>KVAInstall</code>.
///   </li>
///   <li>
///     <em>Logging</em> (var logging) — A feature which is responsible for tracker-specific logging activities.  Implemented in internal class KVATrackerLogging.  You can set the KVALog.shared.level to control what level of log messages are printed, as well as configure various other options through module KochavaCore class KVALog.
///   </li>
///   <li>
///     <em>Networking</em> (var <code>networking</code>) — A feature which provides networking support.  The networking instance manages the exchange of data between the client and various server(s), along with the associated tasks, network transactions, adapters, and instructions.  See class KVANetworking in module KochavaCore.
///   </li>
///   <li>
///     <em>Privacy</em> (var <code>privacy</code>) — A feature which is responsible for privacy.  See class <code>KVAPrivacy</code>.  Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
///   </li>
///   <li>
///     <em>Push Notifications</em> (var <code>pushNotifications</code>) — A feature which provides for the measurement of push notifications.  See class <code>KVAPushNotifications</code>.  Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
///   </li>
///   <li>
///     <em>Sessions</em> (var sessions) — A feature which provides for the measurement of sessions.  Implemented in internal class KVASessions.
///   </li>
///   <li>
///     <em>Updates</em> (var updates) — A feature which updates the server when there are changes to tracked components.  Implemented in internal class KVATrackerUpdates.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("KVATracker")
@interface KVATracker : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVASharedPropertyProvider, KVADeeplinksProcessorProvider, KVAEventSenderProvider, KVAPrivacyProfileRegistrarProvider, KVAPushNotificationsTokenRegistrarProvider>
/// A shared instance, for convenience.
/// This is the preferred way of using a tracker.  To complete the integration you must call func <code>start(withAppGUIDString:)</code> or func <code>start(withPartnerNameString:)</code>.  You may alternatively use a constructor to create your own tracker.  The shared instance provides a few benefits.  First, it simplifies your implementation as you do not need to store an instance to the tracker somewhere in a public location in your own code.  Second, it ensures that if your code unintentionally tries to make use of the shared instance prior to configuration that you can receive a warning in the log from the tracker.  If you use your own property to store the tracker, and it is nil, then this provision would not be automatically available to you.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVATracker * _Nonnull shared;)
+ (KVATracker * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// A shared instance, for convenience— optional.
/// See var <code>shared</code>.  This variable will be nil prior to the shared instance being defaulted.  This may be used to optionally invalidate any existing shared instance without causing it to first be defaulted in the process.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVATracker * _Nullable shared_optional;)
+ (KVATracker * _Nullable)shared_optional SWIFT_WARN_UNUSED_RESULT;
/// The shared instance, an ambiguated form of the var <code>shared</code> which conforms to protocol KVASharedPropertyProvider.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id _Nonnull sharedInstance;)
+ (id _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Create a tracker.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// class MyClass:
/// {
///     let tracker = KVATracker(storageIdString: "alternate")
/// }
///
/// \endcode\param storageIdString An optional storage identifier.  The storage identifier should be left unset (nil) unless you have a reason to not use the default storage space.  See default constructor KVATracker(), or in Objective-C see convenience constructor tracker.
///
- (nonnull instancetype)initWithStorageIdString:(NSString * _Nullable)storageIdString OBJC_DESIGNATED_INITIALIZER;
/// Create a tracker.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// class MyClass:
/// {
///     let tracker = KVATracker()
/// }
///
/// \endcode
- (nonnull instancetype)init;
/// Create a tracker— using modern Objective-C syntax.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// KVATracker *tracker = [KVATracker trackerWithStorageIdString:@"alternate"];
///
/// \endcodenote:
/// This convenience constructor exists for Objective-C and is expected to be removed in a future version.  In Swift you should use default constructor KVATracker(storageIdString:)— or preferably, the shared instance.
/// \param storageIdString An optional storage identifier.  The storage identifier should be left unset (nil) unless you have a reason to not use the default storage space.  See default constructor KVATracker(), or in Objective-C see convenience constructor tracker.
///
+ (nonnull instancetype)trackerWithStorageIdString:(NSString * _Nullable)storageIdString SWIFT_WARN_UNUSED_RESULT;
/// Create a tracker— using modern Objective-C syntax.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// note:
/// This convenience constructor exists for Objective-C and is expected to be removed in a future version.  In Swift you should use default constructor KVATracker()— or preferably, the shared instance.
/// <h2>Example</h2>
/// \code
/// KVATracker *tracker = KVATracker.tracker;
///
/// \endcode
+ (nonnull instancetype)tracker SWIFT_WARN_UNUSED_RESULT;
/// Decode from an object.
/// \param object An object from which to decode.  This object is generally expected to be the output of kva_as(forContext: .persistentStorage).
///
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Decode from an object, supporting filling into an existing initializedObject.
/// This implementation of static func kva_from(…) is special in that this class is viewed as being primarily a container for a set of feature components.  Each of these features takes care of themselves.  At this scope we are mainly setting the fromDictionary property, which will be used as needed when the feature components are brought online.  The principle place where that takes place is when the featureArray is configured, as each feature is added to the array.  To be added this requires them to be instantiated, and, when present, decoded.  See func featureArray_configure().
/// \param object An object from which to decode.  This object is generally expected to be the output of kva_as(forContext: .persistentStorage).
///
/// \param initializedObject An initialized object.  When this is provided it will fill an existing initialized object.  When this is nil a new blank instance will be created.
///
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
/// Encode for a specified context.
/// The returned value will typically be a dictionary formatted as JSON.
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Configure (update) the instance from another object.
/// This method is used to configure the instance.  It is the same method used to configure the instance when the config response is returned.  This is referring to kvinit.  It can also be called from the host to override (or else default) various parameters.  The structure of the object you provide has the same capability as that which the server may return.  Additionally you can wrap the parameters you provide in objects $override$, $override.append$, $default$, or $default.append$, to indicate how these options are treated relative to the server’s options.
/// $override$:  Elements within this object will override any options of the same name specified by the server.
/// $override.append$:  Elements within this object will append/override any previously established $override$.  $override$ does not need to be used first.
/// $default$:  Elements within this object will serve as a default for any options of the same name when not specified by the server.
/// $default.append$:  Elements within this object will append/override any previously established $default$.  $default$ does not need to be used first.
/// The following example will deny the collection of two datapoints, the idfa and idfv.  Ordinarily the best way to do this is through the Kochava dashboard, where these can be controlled within multiple version(s) of an app already in production.  However, if at build time you wanted to explicitly override server-side control, such that these two items effectively always appear in the deny datapoints list, the following code would do so:
/// <h2>Example</h2>
/// \code
/// // trackerConfigureObject
/// let trackerConfigureObject =
/// [
///     "$override.append$":
///     [
///         "privacy":
///         [
///             "deny_datapoints":
///             [
///                 "idfa",
///                 "idfv"
///             ]
///         ]
///     ]
/// ]
///
/// // KVATracker
/// KVATracker.shared.configure(with: trackerConfigureObject, context: KVAContext.host)
/// KVATracker.shared.start(withAppGUIDString: "koapple-sdk-h-random-sn4i")
///
/// \endcode\param object An object from which to configure the instance.  This is most commonly a JSON object.
///
/// \param context The context from which the object was provided.  In rare cases this may have some bearing on the proper interpretation of what was provided.
///
- (void)configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Configure (update) the instance from another object.
/// This function is equivalent to func configure(with:context) however this does not first dispatch to the globalSerial queue.  It is the protocol conformance of KVAConfigureWithProtocol.  You should not use this function directly unless you have a specific need to not perform the preferred dispatch.
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Start the tracker with an appGUIDString.
/// You may start a tracker with either an appGUIDString or a partnerNameString.  Most commonly this is done with an appGUIDString.  See also func <code>start(withPartnerNameString:)</code>.
/// <h2>Example</h2>
/// \code
/// KVATracker.shared.start(withAppGUIDString: "_YOUR_KOCHAVA_APP_GUID_")
///
/// \endcode\param appGUIDString A Kochava app GUID.
///
- (void)startWithAppGUIDString:(NSString * _Nonnull)appGUIDString;
/// Start the tracker with a partnerNameString.
/// You may start a tracker with either an appGUIDString or a partnerNameString.  Most commonly this is done with an appGUIDString.  See also func <code>start(withAppGUIDString:)</code>.
/// <h2>Examples</h2>
/// \code
/// KVATracker.shared.start(withPartnerNameString: "_YOUR_KOCHAVA_PARTNER_NAME_")
///
/// \endcode\param partnerNameString A Kochava partner name.
///
- (void)startWithPartnerNameString:(NSString * _Nonnull)partnerNameString;
/// Start the tracker.
/// An appGUIDString or partnerNameString must be set prior to making this call.  To do this, instead see func start(withAppGUIDString:) and func start(withPartnerNameString:).  This method is called by those two methods, and provides public conformance to protocol KVAStartable.  This method can be used to start an instance of a tracker which was created from decoded JSON.
- (void)start;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Execute an advanced instruction.
/// \param identifierString An identifier for the advanced instruction.
///
/// \param valueObject A value object for the advanced instruction.
///
- (void)executeAdvancedInstructionWithIdentifierString:(NSString * _Nonnull)identifierString valueObject:(id _Nullable)valueObject;
/// Invalidate the instance.
/// This is similar to allowing an instance of the tracker deallocate, but it can also be used on the shared instance.  It will additionally signal certain sub-systems to invalidate themselves, which can result in a more assured and immediate halt.  The scope of this invalidation is not absolute.  Certain sub-systems will continue to run for a period of time until they may gracefully complete.  When using this method with the shared instance, you are guaranteed to be re-defaulted a new instance the next time it is referenced, and you may immediately move forward to re-configure it.
/// When you are not using Intelligent Consent Management, this method can be used to signal that the tracker may no longer run following consent having been denied.  When used this way, you may re-configure a tracker if/when consent is granted.
- (void)invalidate;
/// Invalidate the instance.
/// See func <code>invalidate()</code>
- (void)invalidateWithPrintLogMessageBool:(BOOL)printLogMessageBool;
/// A feature which interfaces with Apple’s SKAdNetwork attribution system.
@property (nonatomic, readonly, strong) KVAAdNetwork * _Nullable adNetwork;
/// A feature which may be used to limit advertising tracking from the level of the application (or host).
@property (nonatomic, readonly, strong) KVAAppLimitAdTracking * _Nonnull appLimitAdTracking;
/// A boolean which indicates if you want to limit ad tracking at the application level (convenience).
/// This feature is related to the Limit Ad Tracking feature which is typically found on an Apple device under Settings, Privacy, Advertising.  In the same way that you can limit ad tracking through that setting, this feature provides a second and independent means for the host app to limit ad tracking by asking the user directly.  A value of false from either this feature or Apple’s will result in the limiting of ad tracking.
@property (nonatomic) BOOL appLimitAdTrackingBool;
/// A feature which interfaces with Apple’s App Tracking Transparency system.
@property (nonatomic, readonly, strong) KVAAppTrackingTransparency * _Nonnull appTrackingTransparency;
/// A feature which provides attribution information related to the install.
@property (nonatomic, readonly, strong) KVAAttribution * _Nonnull attribution;
/// A feature which is responsible for controlling and updating the configuration of the tracker.
/// This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.
@property (nonatomic, readonly, strong) KVATrackerConfig * _Nonnull config;
/// A feature which serves as an authority related to consent for the sharing of personal data.
/// Data sharing privacy laws such as GDPR require consent to be obtained before certain kinds of personal data may be collected or calculated, kept in memory, persisted or retained in persistent storage, and/or shared with partners.  During the natural lifecycle, there are times where partners may be added and cause the consent status to fall back to an unknown state.  Later the user may again be prompted and the consent status may (or may not) again come to be known.  All of this is predicated upon whether or not consent is required, which is governed by a variety of factors such as location.
@property (nonatomic, readonly, strong) KVAConsent * _Nonnull consent;
/// A feature which is responsible for custom identifiers.
/// Register a custom identifier by calling class <code>KVACustomIdentifiers</code> func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
@property (nonatomic, readonly, strong) KVACustomIdentifiers * _Nonnull customIdentifiers;
/// A feature which measures deeplink activity.
/// Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
@property (nonatomic, readonly, strong) KVADeeplinks * _Nonnull deeplinks;
/// A feature which is responsible for the identification of a device.
/// The managed id is referred to as the <em>Kochava Device Id</em>.  Get the Kochava Device Id by getting class <code>KVADeviceId</code> var <code>KVADeviceId/string</code>.
@property (nonatomic, readonly, strong) KVADeviceId * _Nonnull deviceId;
/// A property containing the unique device ID that was generated when the tracker was first initialized on the current install (convenience).
@property (nonatomic, readonly, copy) NSString * _Nullable deviceIdString;
/// A feature which is responsible for linking identities.
/// Register an identity link by calling class <code>KVAIdentityLink</code> func <code>KVAIdentityLink/register(withNameString:identifierString:)</code>.
@property (nonatomic, readonly, strong) KVAIdentityLink * _Nonnull identityLink;
/// A feature which provides information about the install.
/// The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>config</code>.
@property (nonatomic, readonly, strong) KVAInstall * _Nonnull install;
/// A feature which provides networking support.
/// The networking instance manages the exchange of data between the client and various server(s), along with the associated tasks, network transactions, adapters, and instructions.  See class KVANetworking in module KochavaCore.
@property (nonatomic, readonly, strong) KVANetworking * _Nonnull networking;
/// A feature which is responsible for privacy.
/// Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
@property (nonatomic, readonly, strong) KVAPrivacy * _Nonnull privacy;
/// A feature which provides for the measurement of push notifications.
/// Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
@property (nonatomic, readonly, strong) KVAPushNotifications * _Nonnull pushNotifications;
@property (nonatomic, readonly, strong) id <KVADeeplinksProcessor> _Nullable deeplinksProcessor;
@property (nonatomic, readonly, strong) id <KVAEventSender> _Nonnull eventSender;
@property (nonatomic, readonly, strong) id <KVAPrivacyProfileRegistrar> _Nonnull privacyProfileRegistrar;
@property (nonatomic, readonly, strong) id <KVAPushNotificationsTokenRegistrar> _Nonnull pushNotificationsTokenRegistrar;
/// A string used as a  storage identifier for the shared instance.
/// This is used to further qualify where in persistent storage the information for this instance is stored.  This property should not be used except in very specific circumstances.  Please contact your client success representative if you are interested in using this.  You would set this value to a short unique string consisting of regular alphanumeric characters.  Following deployment with a given storage identifer this should never be changed except to represent an entirely new integration.  If used, it is absolutely imperative that this value be consistently set prior to accessing the shared instance for the first time.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable sharedStorageIdString;)
+ (NSString * _Nullable)sharedStorageIdString SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedStorageIdString:(NSString * _Nullable)sharedStorageIdString;
/// A boolean which when true causes the instance to sleep.
/// The default is false.  When set to true, this causes tasks to effectively be suspended until this condition is lifted.  While this is set to true, tasks are not lost per-say;  however, if a task may have otherwise occurred multiple times, it may be represented only once once the condition is lifted.
@property (nonatomic) BOOL sleepBool;
/// A boolean indicating whether or not the instance has been started.
@property (nonatomic, readonly) BOOL startedBool;
@end


@interface KVATracker (SWIFT_EXTENSION(KochavaTracker)) <JSExport>
@end


/// A feature which is responsible for controlling and updating the configuration of the tracker.
/// This feature interfaces with Kochava’s servers to provide a server-based configuration.  This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.
SWIFT_CLASS_NAMED("KVATrackerConfig")
@interface KVATrackerConfig : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for the collection of datapoints.
SWIFT_CLASS_NAMED("KVATrackerDataPoints")
@interface KVATrackerDataPoints : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which encapsulates all of the general aspects of a tracker not belonging to any other encapsulated features.
SWIFT_CLASS_NAMED("KVATrackerGeneral")
@interface KVATrackerGeneral : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for tracker-specific logging activities.
/// You can set the KVALog.shared.level to control what level of log messages are printed, as well as configure various other options through module KochavaCore class KVALog.
SWIFT_CLASS_NAMED("KVATrackerLogging")
@interface KVATrackerLogging : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class KVAProduct;

/// A class which defines the tracker product.
/// A product in this context generally refers to the result of a build.
/// note:
/// This is currently overridden to be a subclass of NSObject rather than KVAProduct so that it can be represented in Objective-C.  If you use KVAProduct it will still build, but the automatic module registration will fail to locate the class.  You can see early evidence of the problem if you also make the shared property be of the class type, where the compiler will say that it cannot use @objc because it cannot be expressed in Objective-C.  This is apparently a problem that Swift has providing Objective-C compatibility to Swift classes which subclass other Swift classes across modules.  For example, KVACoreProduct does not have this problem, presumably because it’s in the same module as KVAProduct.  In order to convert this class to subclass KVAProduct, or to subsequently allow shared to be of the class’ type, a means of registering/loading the class as a Swift-only class would be required.  More importantly, however, we’d need to give up public Objective-C support.  Since that doesn’t seem possible, the only alternative would be that Apple fixes this issue and provides the necessary support, assuming that’s possible.
SWIFT_CLASS_NAMED("KVATrackerProduct")
@interface KVATrackerProduct : NSObject <KVASharedPropertyProvider>
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAProduct * _Nonnull shared;)
+ (KVAProduct * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id _Nonnull sharedInstance;)
+ (id _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the parameters for the tracker product.
SWIFT_CLASS("_TtC14KochavaTracker23KVATrackerProductParams")
@interface KVATrackerProductParams : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A feature which updates the server when there are changes to tracked components.
SWIFT_CLASS_NAMED("KVATrackerUpdates")
@interface KVATrackerUpdates : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef KOCHAVATRACKER_SWIFT_H
#define KOCHAVATRACKER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppTrackingTransparency;
@import Foundation;
@import JavaScriptCore;
@import KochavaCore;
@import ObjectiveC;
#endif

#import <KochavaTracker/KochavaTracker.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KochavaTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class KVAContext;
@class KVANetworking;
@class NSDate;
@protocol KVAMutable;
@class KVAEvent;
@protocol KVAAsForContextProtocol;
@class KVAAdNetworkConversion;

/// A feature which interfaces with Apple’s SKAdNetwork attribution system.
SWIFT_CLASS_NAMED("KVAAdNetwork")
@interface KVAAdNetwork : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)configureWithNetworking:(KVANetworking * _Nonnull)networking measurementWindowStartDate:(NSDate * _Nullable)measurementWindowStartDate delegate:(id <KVAMutable> _Nullable)delegate;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (id <KVAAsForContextProtocol, KVAFromProtocol> _Nullable)eventNetTransactionWillStartRequestWithNoAdNetworkConversionResult:(KVAEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (void)invalidate;
/// A closure which is called when the SKAdNetwork registerAppForAdNetworkAttribution API has been called.
/// Your code should assume that if some action needs to be performed on the main queue that it should first dispatch asynchronously to it.
@property (nonatomic, copy) void (^ _Nullable didRegisterAppForAttributionBlock)(KVAAdNetwork * _Nonnull);
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// The current conversion information.
@property (nonatomic, strong) KVAAdNetworkConversion * _Nonnull conversion;
@end

@class KVAAdNetworkConversionResult;

/// A feature which determines adnetwork conversion(s).
SWIFT_CLASS_NAMED("KVAAdNetworkConversion")
@interface KVAAdNetworkConversion : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A closure which is called when the SKAdNetwork updateConversionValue API has been called.
/// Your code should assume that if some action needs to be performed on the main queue that it should first dispatch asynchronously to it.
@property (nonatomic, copy) void (^ _Nullable didUpdateValueBlock)(KVAAdNetworkConversion * _Nonnull, KVAAdNetworkConversionResult * _Nonnull);
/// The current conversion result.
/// This object will mutate when the current result is updated.  If you want a immutable picture then you should take a copy.
@property (nonatomic, strong) KVAAdNetworkConversionResult * _Nonnull result;
@end


/// A class which defines an adnetwork conversion event.
SWIFT_CLASS_NAMED("KVAAdNetworkConversionEvent")
@interface KVAAdNetworkConversionEvent : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class NSNumber;

/// The adnetwork conversion result.
SWIFT_CLASS_NAMED("KVAAdNetworkConversionResult")
@interface KVAAdNetworkConversionResult : NSObject <NSCopying, KVAConfigureWithProtocol, KVAFromProtocol, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Return the conversion value integer which is used with the SKAdNetwork updateConversionValue API.
/// Apple currently restricts this value to 6-bits.  This is a combination (OR) of the translated value (translatedValueIntNumber) with any extension interval value (extensionIntervalTranslatedValueInt.integerValue).
- (NSInteger)valueInt SWIFT_WARN_UNUSED_RESULT;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A string which represents the model used for the conversion.
@property (nonatomic, readonly, copy) NSString * _Nullable modelString;
@property (nonatomic, readonly, strong) NSNumber * _Nullable translatedValueIntNumber;
/// A number representing the raw value.
/// This is a raw value which has not had any translations applied yet.  This also does not include any extension interval value (extensionIntervalTranslatedValueInt).
@property (nonatomic, strong) NSNumber * _Nullable rawValueNumber;
@end


/// A feature which provides measurement for App Clips.
SWIFT_CLASS_NAMED("KVAAppClips")
@interface KVAAppClips : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which may be used to limit advertising tracking from the level of the application (or host).
SWIFT_CLASS_NAMED("KVAAppLimitAdTracking")
@interface KVAAppLimitAdTracking : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A boolean which indicates if you want to limit ad tracking at the application level.
/// This feature is related to the Limit Ad Tracking feature which is typically found on an Apple device under Settings, Privacy, Advertising.  In the same way that you can limit ad tracking through that setting, this feature provides a second and independent means for the host app to limit ad tracking by asking the user directly.  A value of true from either this feature or Apple’s will result in the limiting of ad tracking.
@property (nonatomic) BOOL boolean;
@end


/// A feature which interfaces with Apple’s App Tracking Transparency system.
SWIFT_CLASS_NAMED("KVAAppTrackingTransparency")
@interface KVAAppTrackingTransparency : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Notify that a request for tracking authorization did complete.
/// \param authorizationStatus The provided authorization status.
///
- (void)authorizationDidCompleteWithStatus:(ATTrackingManagerAuthorizationStatus)authorizationStatus SWIFT_AVAILABILITY(ios_app_extension,introduced=14.0) SWIFT_AVAILABILITY(tvos,introduced=14.0) SWIFT_AVAILABILITY(maccatalyst,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A boolean which indicates if the instance should automatically request tracking authorization.
/// Default true.  Subject to server-based override.  Also subject to enabledBool.  See enabledBool.
@property (nonatomic) BOOL autoRequestTrackingAuthorizationBool;
/// A time interval to wait for the request for tracking authorization before proceeding to send the install.
/// Default 30.0.  Subject to server-based override.  This provides time to wait to obtain the authorization necessary to collect the IDFA.
@property (nonatomic) NSTimeInterval authorizationStatusWaitTimeInterval;
@property (nonatomic) BOOL enabledBool;
/// The authorization status expressed as an NSString.
/// This is optional and will be nil until a status is known.  For this reason this can be checked as a means of determining if a status has been determined.  Current possible values:  “authorized”, “denied”, “notDetermined”, “restricted”, “unknown”.
@property (nonatomic, readonly, copy) NSString * _Nullable authorizationStatusString;
@end


/// A feature which interfaces with Apple Search Ads.
SWIFT_CLASS_NAMED("KVAAppleSearchAds")
@interface KVAAppleSearchAds : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Configure the instance for use.
/// \param networking An instance of class KVANetworking.
///
/// \param delegate A delegate.
///
- (void)configureWithNetworking:(KVANetworking * _Nonnull)networking delegate:(id <KVAMutable> _Nonnull)delegate;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for attribution through Apple’s Apple Search Ads method 2.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod2")
@interface KVAAppleSearchAdsMethod2 : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator>
+ (nonnull instancetype)appleSearchAdsMethod2Attribution SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Apple’s attribution as provided by Apple Search Ads method 2.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod2Attribution")
@interface KVAAppleSearchAdsMethod2Attribution : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for attribution through Apple’s Apple Search Ads method 3.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod3")
@interface KVAAppleSearchAdsMethod3 : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Apple’s attribution as provided by Apple Search Ads method 3.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod3Attribution")
@interface KVAAppleSearchAdsMethod3Attribution : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KVAAttributionResult;

/// A feature which provides attribution information related to the install.
SWIFT_CLASS_NAMED("KVAAttribution")
@interface KVAAttribution : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Get the attribution result with a completion handler.
/// \param completionHandler A completion handler to call once the result has been retrieved.
///
- (void)retrieveResultWithCompletionHandler:(void (^ _Nonnull)(KVAAttributionResult * _Nonnull))completionHandler;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A closure which is called when attribution is retrieved.
@property (nonatomic, copy) void (^ _Nullable closure_didRetrieveResult)(KVAAttribution * _Nonnull, KVAAttributionResult * _Nonnull);
/// A boolean indicating if an attribution result should be retrieved.
/// This boolean does not need to be set if you are using func <code>retrieveResult(withCompletionHandler:)</code> to retrieve the attribution result.  It needs to be set if you intend to set var <code>closure_didRetrieveResult-swift.property</code> and then wait for it to be called.
@property (nonatomic) BOOL retrieveResultBool;
/// The current attribution result.
/// When accessed this property will contain whatever value may have been previously collected.  For a current value which may initiate new asynchronous collection see func <code>retrieveResult(withCompletionHandler:)</code>
@property (nonatomic, readonly, strong) KVAAttributionResult * _Nonnull result;
@end


/// The attribution result.
SWIFT_CLASS_NAMED("KVAAttributionResult")
@interface KVAAttributionResult : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// A boolean indicating if the result attributed the install.
@property (nonatomic, readonly) BOOL attributedBool;
/// A boolean indicating if the current install is the first install.
@property (nonatomic, readonly) BOOL firstInstallBool;
/// A dictionary containing the raw result information.
@property (nonatomic, readonly, copy) NSDictionary * _Nullable rawDictionary;
/// A boolean indicating if the result was successfully retrieved.
@property (nonatomic, readonly) BOOL retrievedBool;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which is responsible for custom identifiers.
/// Register a custom identifier by calling func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
SWIFT_CLASS_NAMED("KVACustomIdentifiers")
@interface KVACustomIdentifiers : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Register a custom identifier.
/// In order to send a custom identifier it must be whitelisted on your account.
/// \param nameString The name of the identifier.
///
/// \param identifierString The identifier.
///
- (void)registerWithNameString:(NSString * _Nonnull)nameString identifierString:(NSString * _Nonnull)identifierString;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class NSURL;
@protocol KVADeeplinksProcessorProvider;

/// A deeplink.
SWIFT_CLASS_NAMED("KVADeeplink")
@interface KVADeeplink : NSObject <KVAFromProtocol>
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param timeoutTimeInterval A time interval after which to timeout and return whatever result we have.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param processor An array of KVADeeplinksProcessorProvider to which to add the token.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url processor:(id <KVADeeplinksProcessorProvider> _Nullable)processor completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param timeoutTimeInterval A time interval after which to timeout and return whatever result we have.
///
/// \param processor An array of KVADeeplinksProcessorProvider to which to add the token.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval processor:(id <KVADeeplinksProcessorProvider> _Nullable)processor completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The deeplink url as provided by the operating system.
@property (nonatomic, copy) NSString * _Nullable urlString;
/// The destination for the deeplink.
@property (nonatomic, copy) NSString * _Nullable destinationString;
/// A dictionary containing raw information about the deeplink.
@property (nonatomic, copy) NSDictionary * _Nullable rawDictionary;
@end


SWIFT_PROTOCOL("_TtP14KochavaTracker21KVADeeplinksProcessor_")
@protocol KVADeeplinksProcessor
/// Process a deeplink.
/// \param deeplink An instance of KVADeeplink.
///
/// \param timeoutTimeInterval A timeout time interval.
///
/// \param completionHandler A completion handler to call when processing is complete.
///
- (void)processDeeplink:(KVADeeplink * _Nonnull)deeplink timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
@end


/// A feature which measures deeplink activity.
/// Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
SWIFT_CLASS_NAMED("KVADeeplinks")
@interface KVADeeplinks : NSObject <NSCopying, KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVADeeplinksProcessor>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Process a deeplink.
/// \param deeplink An instance of KVADeeplink.
///
/// \param timeoutTimeInterval A timeout time interval.
///
/// \param completionHandler A completion handler to call when processing is complete.
///
- (void)processDeeplink:(KVADeeplink * _Nonnull)deeplink timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end



SWIFT_PROTOCOL("_TtP14KochavaTracker29KVADeeplinksProcessorProvider_")
@protocol KVADeeplinksProcessorProvider
/// A property which conforms to protocol KVADeeplinksProcessor.
@property (nonatomic, readonly, strong) id <KVADeeplinksProcessor> _Nullable deeplinksProcessor;
@end


/// A feature which is responsible for the identification of a device.
/// The managed id is referred to as the <em>Kochava Device Id</em>.  Get the Kochava Device Id by getting var <code>string</code>.
SWIFT_CLASS_NAMED("KVADeviceId")
@interface KVADeviceId : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)kva_didMutate_performSideEffectsWithChildObject:(id _Nullable)childObject infoDictionary:(NSDictionary * _Nullable)infoDictionary;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A property containing the unique device ID that was generated when the tracker was first initialized on the current install.
@property (nonatomic, readonly, copy) NSString * _Nullable string;
@end

@class KVAEventType;
@protocol KVAEventSenderProvider;
@class KVAConsent;
@class NSDecimalNumber;

/// The class KVAEvent provides a means of defining a post-install event, providing standardized parameters.
/// Sending events is not required.  To track installation information, you do not need to do anything more than to start a tracker.  Still, many advertisers want to understand and correlate the relationship between conversion and attribution source information with user activity.  This can only be done by tracking events.
/// Events can be sent from anywhere within the application.  Events will be coupled with device datapoints and general application information.  If they cannot be sent immediately to Kochava they will be queued and retried later.
/// The KVAEvent class defines an individual event, providing a variety of standardized event types and parameters.  Standard event types may represent a purchase, the completion of a level, an achievement, etc.  Standard parameters may represent a currency, price, level, etc.
/// The use of standard event types and parameters maximizes parity with external analytics partners and ensures optimal reporting and analytical output via the Kochava platform.  If the data you are sending in events can be sent using standard event types and parameters we recommend you do so.
SWIFT_CLASS_NAMED("KVAEvent")
@interface KVAEvent : NSObject <KVAFromProtocol>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (KVAEvent * _Nonnull)eventWithType:(KVAEventType * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
+ (KVAEvent * _Nonnull)eventWithTypeNameString:(NSString * _Nonnull)typeNameString SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Send the event using the default KVAEventSenderProvider.
/// The default is the shared instance of class <code>KVATracker</code>.
- (void)send;
/// Send the event with a specified array of KVAEventSenderProvider(s).
- (void)sendWithSenderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderProviderArray;
/// Return a string representation of the name of the event.
/// a.k.a.  “event_name”
- (NSString * _Nonnull)eventNameString SWIFT_WARN_UNUSED_RESULT;
/// Return any valueObject for a given propertyIdentifierString.
/// \param propertyIdentifierString A string which generally would be equivalent to the name of the key of the property as it would appear in the event payload.
///
- (id _Nullable)valueObjectForPropertyIdentifierString:(NSString * _Nullable)propertyIdentifierString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)subURLIdString SWIFT_WARN_UNUSED_RESULT;
/// An ad network conversion result.
/// Qualifying events are ammended with this property just prior to starting a send request.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic, strong) id <KVAAsForContextProtocol, KVAFromProtocol> _Nullable adNetworkConversionResult;
/// A type for the event
/// Although these types are standardized, custom events are designated using type .custom.
@property (nonatomic, readonly, strong) KVAEventType * _Nonnull eventType;
/// A boolean indicating if a dispatch should occur when the event is sent.
/// Default true.  The default behavior dispatches the sending of an event to the default queue that should be used when sending the event (i.e. KVADispatchQueue.globalSerial).  If it is known that you are already on the appropriate queue, you may set this to true to avoid an additional dispatch.  This can have the effect of fine tuning behavior to ensure that related operations essentially occur atomically.  It is important to not use this feature if you are not on the appropriate queue already.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic) BOOL sendDispatchBool;
/// A boolean indicating if a LogMessage should be printed when the event is sent.
/// Default true.  The default behavior prints a log message when the event is sent.  The corresponding log message is presented as though the event was sent by a call from the host.  This boolean can be set to false so that the event will be sent silently, and not appear as though it was sent by a call the host.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic) BOOL sendPrintLogMessageBool;
/// A boolean which when set will cause the event to be serviced locally when sent.
/// When serviced locally the response for the request is provided locally and the request is post the event to the server is never made.  In every other respect the effects are the same.  AdNetwork conversion information is still calculated.
@property (nonatomic) BOOL serviceLocallyBool;
/// A property containing an action string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable actionString;
/// A property containing an ad campaign identifier string.
/// This is expected to contain a string corresponding to an ad campaign identifier.
@property (nonatomic, copy) NSString * _Nullable adCampaignIdString;
/// A property containing an ad campaign name string.
/// This is expected to contain a string corresponding to an ad campaign name.
@property (nonatomic, copy) NSString * _Nullable adCampaignNameString;
/// A property containing an ad device type string.
/// This is expected to contain a string corresponding to a device type.
@property (nonatomic, copy) NSString * _Nullable adDeviceTypeString;
/// A property containing an ad group identifier string.
/// This is expected to contain a string corresponding to an ad group identifier.
@property (nonatomic, copy) NSString * _Nullable adGroupIdString;
/// A property containing an ad group name string.
/// This is expected to contain a string corresponding to an ad group name.
@property (nonatomic, copy) NSString * _Nullable adGroupNameString;
/// A property containing an ad mediation network name string.
/// This is expected to contain a standardized string corresponding to an advertising network.  It is the name of the network that was used during mediation.
@property (nonatomic, copy) NSString * _Nullable adMediationNameString;
/// A property containing an ad network name string.
/// This is expected to contain a standardized string corresponding to an advertising network.
@property (nonatomic, copy) NSString * _Nullable adNetworkNameString;
/// A property containing an ad placement string.
/// This is expected to contain a string corresponding to an ad placement, ad unit, etc.
@property (nonatomic, copy) NSString * _Nullable adPlacementString;
/// A property containing an ad size string.
/// This is expected to contain a string corresponding to an ad size.
@property (nonatomic, copy) NSString * _Nullable adSizeString;
/// A property containing an ad type string.
/// This is expected to contain a string corresponding to an ad type.
@property (nonatomic, copy) NSString * _Nullable adTypeString;
/// A boolean indicating that this event originated from an Apple Watch.
@property (nonatomic) BOOL appleWatchBool;
/// A string containing a unique identifier associated with the Apple Watch from which this event originated.
/// Optional.  You may set this property in addition to appleWatchBool if you have a unique identifier associated with the watch.
@property (nonatomic, copy) NSString * _Nullable appleWatchIdString;
/// A property containing an App Store receipt which has been converted into a base64 encoded string.
/// The format of the information is expected to be that which is provided by the main bundle’s appStoreReceiptURL method, the data of which being loaded and base-64-string-encoded.
@property (nonatomic, copy) NSString * _Nullable appStoreReceiptBase64EncodedString;
/// A property containing a boolean wrapped in an NSNumber which indicates that something is background.
/// This is expected to contain a boolean which indicates if something is background, or occurred while in the background.  This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable backgroundBoolNumber;
/// A property indicating whether a checkout took place as a guest.
/// This is generally taken to be a boolean, but it is passed as a string so that you can provide more than two states.  Suggested values are “true” and “false”, but can also be values such as “yes”, “no”, or “partial”.
@property (nonatomic, copy) NSString * _Nullable checkoutAsGuestString;
/// A property containing a boolean wrapped in an NSNumber which indicates that something is completed.
/// This is expected to contain a boolean which indicates if something is completed.  This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable completedBoolNumber;
/// An instance of KVAConsent.
@property (nonatomic, strong) KVAConsent * _Nullable consent;
/// A property containing a content identifier string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable contentIdString;
/// A property containing a content type string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable contentTypeString;
/// A property containing a currency type string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable currencyString;
/// A property containing a custom event name string.
/// Standardized event names are automatically determined from the event type enum.  If an appropriate event type is not present, you may set the event type to KVAEventType.custom and the customEventNameString property to your custom event name string.  Event names do not need to be pre-registered.  They can be any alphanumeric string value which does not begin with an underscore.  NOTE: Prepending an event name with an underscore is a convention reserved for Kochava system events. (i.e. _INSTALL)
@property (nonatomic, copy) NSString * _Nullable customEventNameString;
/// A property containing a date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable date;
/// A property containing a date string.  “dateString” can be used as an alternate to “date” when a specific date format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable dateString;
/// A property containing a description.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable descriptionString;
/// A property containing a destination.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable destinationString;
/// A property that contains a duration.  It is a time interval that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable durationTimeIntervalNumber;
/// A property that contains an end date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable endDate;
/// A property that contains an end date.  “endDateString” can be used as an alternate to “endDate” when a specific date format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable endDateString;
/// A property containing an informational dictionary of key/value pairs.
/// A information dictionary.  The keys and values can be any alphanumeric string value.  This field has an entirely generic quality, in that it can contain whatever you consider to be fitting value.  The dictionary should not contain sub-dictionaries.
@property (nonatomic, copy) NSDictionary * _Nullable infoDictionary;
/// A property containing an informational string.
/// A informational string.  This can be any alphanumeric string value.  This field has an entirely generic quality, in that it can contain whatever you consider to be fitting value.
/// If the string passed is all numeric (and may include a decimal point), Kochava will automatically sum the amounts passed for the same nameString.  For example, if you sent the purchase amount of in-app purchases in infoString and named nameString “IAP – Purchase Price”, Kochava would add up all the purchase amounts for you and present them as a total for “IAP – Purchase Price”.  Regardless of what is passed in infoString, Kochava’s user dashboard will let you access all the data passed in infoString for any nameString, and present a count of all times an event was sent passing any given nameString.
/// NOTE: If you pass a string of JSON represented data, only the root level (no nested chunks) is stored.  Also, a limit of 75 characters is applied for a non-JSON-decodable string passed as an event infoString.
@property (nonatomic, copy) NSString * _Nullable infoString;
/// A property that contains an indication of where an item as added from.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable itemAddedFromString;
/// A property that contains a level.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable levelString;
/// A property that contains a maximum rating value.  It is a double that is wrapped in an NSNumber.  This property is used in conjunction with ratingValueDoubleNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable maxRatingValueDoubleNumber;
/// A property that contains a name.  It can be a human name or the name of any other item type.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  It can be a person’s name or the name of any other object.
@property (nonatomic, copy) NSString * _Nullable nameString;
/// A property that contains an order id.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable orderIdString;
/// A property that contains an origin.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable originString;
/// A property that contains a payload in the form of a dictionary.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDictionary * _Nullable payloadDictionary;
/// A property that contains a price.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  Because it uses an NSDecimalNumber, it is better suited for preserving decimal precision than priceDoubleNumber.  priceDecimalNumber and priceDoubleNumber share the same key when sent to the server.  If both are set, the value within priceDecimalNumber will win.
@property (nonatomic, strong) NSDecimalNumber * _Nullable priceDecimalNumber;
/// A property that contains a price.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  In order to better preserve decimal precision, see priceDecimalNumber.  priceDecimalNumber and priceDoubleNumber share the same key when sent to the server.  If both are set, the value within priceDecimalNumber will win.
@property (nonatomic, strong) NSNumber * _Nullable priceDoubleNumber;
/// A property that contains a quantity.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable quantityDoubleNumber;
/// A property that contains a rating value.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable ratingValueDoubleNumber;
/// A property that contains a receipt id.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable receiptIdString;
/// A property that contains where something was referred from.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable referralFromString;
/// A property that contains a registration method.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable registrationMethodString;
/// A property that contains results.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable resultsString;
/// A property that contains a score.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable scoreString;
/// A property that contains a search term (or terms).  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable searchTermString;
/// A property that contains a source string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable sourceString;
/// A property that contains a spatial coordinate’s x value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialXDoubleNumber;
/// A property that contains a spatial coordinate’s y value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialYDoubleNumber;
/// A property that contains a spatial coordinate’s z value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialZDoubleNumber;
/// A property that contains a start date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable startDate;
/// A property that contains a start date.  “startDateString” is a string that can be used as an alternate to “startDate” when a specific display format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable startDateString;
/// A property that contains a success string.  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable successString;
/// A property that contains a user id.  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable userIdString;
/// A property that contains a URI (or URL) string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable uriString;
/// A property that contains a username.  This is intended to be used to store an account-syle username, as opposed to a user’s name (compare “nameString”).  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable userNameString;
/// A property that contains a validated string.  It is a string that is intended to contain a boolean-like value, such as “true” or “false”.  It can also contain other  custom values such as “partial”.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable validatedString;
@end


@interface KVAEvent (SWIFT_EXTENSION(KochavaTracker)) <JSExport>
@end


@interface KVAEvent (SWIFT_EXTENSION(KochavaTracker))
/// Create an instance of class KVAEvent which has a customEventNameString, and then send it.
/// \param customEventNameString A string containing the event name.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString;
/// Create an instance of class KVAEvent which has a customEventNameString, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoDictionary, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoDictionary, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoString, and then send it.
/// \param customEventNameString A string containing event name.
///
/// \param infoString An info string.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoString, and then send it.
/// \param customEventNameString A string containing event name.
///
/// \param infoString A custom string.  It may be an unnested (single dimensional) dictionary converted to a JSON formatted string.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
/// \param infoString An info string.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
/// \param infoString An info string.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("KVAEventSender")
@protocol KVAEventSender
/// Send an event from the device to the appropriate server(s).
/// \param event A KVAEvent configured with the values you want to associate with the event.
///
- (void)sendEvent:(KVAEvent * _Nonnull)event;
@end


SWIFT_PROTOCOL_NAMED("KVAEventSenderProvider")
@protocol KVAEventSenderProvider
/// A property which conforms to protocol KVAEventSender.
@property (nonatomic, readonly, strong) id <KVAEventSender> _Nonnull eventSender;
@end


/// A class which defines an event type.
SWIFT_CLASS_NAMED("KVAEventType")
@interface KVAEventType : NSObject <KVAFromProtocol>
/// An event type which signifies that an item was added to a cart.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull addToCart;)
+ (KVAEventType * _Nonnull)addToCart SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was added to a wish list.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull addToWishList;)
+ (KVAEventType * _Nonnull)addToWishList SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an achievement was achieved.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull achievement;)
+ (KVAEventType * _Nonnull)achievement SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a checkout was started.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull checkoutStart;)
+ (KVAEventType * _Nonnull)checkoutStart SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a customEventNameString will be supplied.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull custom;)
+ (KVAEventType * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a level was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull levelComplete;)
+ (KVAEventType * _Nonnull)levelComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a purchase was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull purchase;)
+ (KVAEventType * _Nonnull)purchase SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was rated.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull rating;)
+ (KVAEventType * _Nonnull)rating SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a registration was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull registrationComplete;)
+ (KVAEventType * _Nonnull)registrationComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a search was performed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull search;)
+ (KVAEventType * _Nonnull)search SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a tutorial was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull tutorialComplete;)
+ (KVAEventType * _Nonnull)tutorialComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was viewed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull view;)
+ (KVAEventType * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an ad was viewed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull adView;)
+ (KVAEventType * _Nonnull)adView SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a push notification was received.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull pushReceived;)
+ (KVAEventType * _Nonnull)pushReceived SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a push notification was opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull pushOpened;)
+ (KVAEventType * _Nonnull)pushOpened SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that consent was granted.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull consentGranted;)
+ (KVAEventType * _Nonnull)consentGranted SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that there was a deep link.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull deeplink;)
+ (KVAEventType * _Nonnull)deeplink SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an ad was clicked.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull adClick;)
+ (KVAEventType * _Nonnull)adClick SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a trial was started.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull startTrial;)
+ (KVAEventType * _Nonnull)startTrial SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that there was a subscription.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull subscribe;)
+ (KVAEventType * _Nonnull)subscribe SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The name.
/// Examples:  “Add to Cart”, “Add to Wish List”, “Achievement”, etc.
@property (nonatomic, readonly, copy) NSString * _Nonnull nameString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which tracks user behavior and actions beyond the install.
SWIFT_CLASS_NAMED("KVAEvents")
@interface KVAEvents : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAEventSender>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)sendEvent:(KVAEvent * _Nonnull)event;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for linking identities.
/// Register an identity link using class func <code>register(withNameString:identifierString:)</code>.
SWIFT_CLASS_NAMED("KVAIdentityLink")
@interface KVAIdentityLink : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Register an identity link.
/// note:
/// When used, and when possible, this method should be called before (or as soon as possible after) the tracker is started.  This helps to ensure that your identity values are associated with your install.
/// \param nameString The name of the identifier.
///
/// \param identifierString The identifier.
///
- (void)registerWithNameString:(NSString * _Nonnull)nameString identifierString:(NSString * _Nonnull)identifierString;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which provides information about the install.
/// The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>KVATracker/config</code>.
SWIFT_CLASS_NAMED("KVAInstall")
@interface KVAInstall : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// The date that the install did start first.
/// This will be nil until the first time that the start function for the tracker has executed.
@property (nonatomic, copy) NSDate * _Nullable didStartFirstDate;
@end

@class KVAPrivacyProfile;

SWIFT_PROTOCOL_NAMED("KVAPrivacyProfileRegistrar")
@protocol KVAPrivacyProfileRegistrar
- (void)registerProfile:(KVAPrivacyProfile * _Nonnull)profile;
@end


/// A feature which is responsible for privacy.
/// Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
SWIFT_CLASS_NAMED("KVAPrivacy")
@interface KVAPrivacy : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAPrivacyProfileRegistrar>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Register a profile.
/// \param profile The profile to register.
///
- (void)registerProfile:(KVAPrivacyProfile * _Nonnull)profile;
/// Set a boolean indicating if the specified profile name is enabled.
/// See method register(profile:).
/// \param profileNameString The name of a profile.
///
/// \param enabledBool A boolean indicating if enabled.
///
- (void)setEnabledBoolForProfileNameString:(NSString * _Nonnull)profileNameString enabledBool:(BOOL)enabledBool;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@protocol KVAPrivacyProfileRegistrarProvider;

/// A privacy profile.
SWIFT_CLASS_NAMED("KVAPrivacyProfile")
@interface KVAPrivacyProfile : NSObject <KVAFromProtocol>
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacy profile.
///
/// \param payloadKeyStringArray An array of payload keys (datapoint identifiers).
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray;
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacy profile.
///
/// \param payloadKeyStringArray An array of payload keys (datapoint identifiers).
///
/// \param registrarArray An array of KVAPrivacyProfileRegistrarProvider to which to register the privacy profile.
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray registrarArray:(NSArray<id <KVAPrivacyProfileRegistrarProvider>> * _Nullable)registrarArray;
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacyProfile.
///
/// \param payloadKeyStringArray An array of datapoint identifiers.
///
/// \param payloadIdStringArray An array of payload identifiers.
///
/// \param registrarArray An array of KVAPrivacyProfileRegistrarProvider to which to register the KVAPrivacyProfile.
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray payloadIdStringArray:(NSArray<NSString *> * _Nullable)payloadIdStringArray registrarArray:(NSArray<id <KVAPrivacyProfileRegistrarProvider>> * _Nullable)registrarArray;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// A unique name string.
@property (nonatomic, readonly, copy) NSString * _Nonnull nameString;
/// An array of payload keys (datapoint identifiers).
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable payloadKeyStringArray;
/// An array of payload identifiers (network transaction types).
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable payloadIdStringArray;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("KVAPrivacyProfileRegistrarProvider")
@protocol KVAPrivacyProfileRegistrarProvider
/// A property which conforms to protocol KVAPrivacyProfileRegistrar.
@property (nonatomic, readonly, strong) id <KVAPrivacyProfileRegistrar> _Nonnull privacyProfileRegistrar;
@end

@class KVAPushNotificationsToken;

SWIFT_PROTOCOL("_TtP14KochavaTracker34KVAPushNotificationsTokenRegistrar_")
@protocol KVAPushNotificationsTokenRegistrar
- (void)registerToken:(KVAPushNotificationsToken * _Nonnull)token;
@end


/// A feature which provides for the measurement of push notifications.
/// Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
SWIFT_CLASS_NAMED("KVAPushNotifications")
@interface KVAPushNotifications : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable, KVAPushNotificationsTokenRegistrar>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)registerToken:(KVAPushNotificationsToken * _Nonnull)token;
- (void)invalidate;
/// A boolean indicating if push notifications is enabled.
@property (nonatomic) BOOL enabledBool;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class NSData;
@protocol KVAPushNotificationsTokenRegistrarProvider;

/// A push notifications token.
SWIFT_CLASS_NAMED("KVAPushNotificationsToken")
@interface KVAPushNotificationsToken : NSObject <KVAFromProtocol>
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenData The device token as provided in Data.
///
+ (void)registerWithData:(NSData * _Nonnull)deviceTokenData;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenDataHexString The device token as provided as a data hex string.
///
+ (void)registerWithDataHexString:(NSString * _Nonnull)deviceTokenDataHexString;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenData The device token as provided in Data.
///
/// \param registrarArray An array of KVAPushNotificationsTokenRegistrarProvider to which to add the token.
///
+ (void)registerWithData:(NSData * _Nonnull)deviceTokenData registrarArray:(NSArray<id <KVAPushNotificationsTokenRegistrarProvider>> * _Nullable)registrarArray;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenDataHexString The device token as provided as a data hex string.
///
/// \param registrarArray An array of KVAPushNotificationsTokenRegistrarProvider to which to add the token.
///
+ (void)registerWithDataHexString:(NSString * _Nonnull)deviceTokenDataHexString registrarArray:(NSArray<id <KVAPushNotificationsTokenRegistrarProvider>> * _Nullable)registrarArray;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The token data as provided by the operating system.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The date that the token was provided by the operating system.
@property (nonatomic, readonly, copy) NSDate * _Nullable providedDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP14KochavaTracker42KVAPushNotificationsTokenRegistrarProvider_")
@protocol KVAPushNotificationsTokenRegistrarProvider
/// A property which conforms to protocol KVAPushNotificationsTokenRegistrar.
@property (nonatomic, readonly, strong) id <KVAPushNotificationsTokenRegistrar> _Nonnull pushNotificationsTokenRegistrar;
@end


/// A class which encapsulates a session.
SWIFT_CLASS_NAMED("KVASession")
@interface KVASession : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_didMutate_performSideEffectsWithChildObject:(id _Nullable)childObject infoDictionary:(NSDictionary * _Nullable)infoDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for the measurement of sessions.
SWIFT_CLASS_NAMED("KVASessions")
@interface KVASessions : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class KVATrackerConfig;

/// The class KVATracker provides an interface between a host application and Kochava’s Attribution and Measurement servers.
/// The class KVATracker is the main interface for module KochavaTracker.  A tracker manages the exchange of data between the client and server, along with the associated tasks and network transactions.  If you have not already integrated the KochavaTracker SDK into your project, refer to our KochavaTracker iOS SDK support documentation.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// From there, the tracker proceeds to start and perform its various tasks.  This is typically done during the earliest phases of the host’s lifecycle, so that installation attribution can be quickly established and post-install events may begin to egress.
/// You may alternately create an instance.  If you do, it is your responsibility to maintain a strong reference.  And if you create multiple instances, it is your responsibility to configure each with a unique storageIdentifierString.
/// <h2>Examples</h2>
/// Example - Starting the shared instance using func <code>start(withAppGUIDString:)</code>:
/// \code
/// KVATracker.shared.start(withAppGUIDString: "_YOUR_APP_GUID_")
///
/// \endcode<h2>Features</h2>
/// <ul>
///   <li>
///     <em>Ad Network</em> (var <code>adNetwork</code>) — A feature which interfaces with Apple’s SKAdNetwork attribution system.  See class <code>KVAAdNetwork</code>.
///   </li>
///   <li>
///     <em>App Clips</em> (var appClips) — A feature which provides measurement for App Clips.  Implemented in internal class KVAAppClips.
///   </li>
///   <li>
///     <em>Apple Search Ads</em> (var appleSearchAds ) — A feature which interfaces with Apple Search Ads.  Implemented in internal class KVAAppleSearchAds.
///   </li>
///   <li>
///     <em>App Limit Ad Tracking</em> (var <code>appLimitAdTracking</code>) — A feature which may be used to limit advertising tracking from the level of the application (or host).  See class <code>KVAAppLimitAdTracking</code>.
///   </li>
///   <li>
///     <em>App Tracking Transparency</em> (var <code>appTrackingTransparency</code>) — A feature which interfaces with Apple’s App Tracking Transparency system.  See class <code>KVAAppTrackingTransparency</code>.
///   </li>
///   <li>
///     <em>Attribution</em> (var <code>attribution</code>) — A feature which provides attribution information related to the install.  See class <code>KVAAttribution</code>.
///   </li>
///   <li>
///     <em>Config</em> (var <code>config</code>) — A feature which is responsible for controlling and updating the configuration of the tracker.  This feature interfaces with Kochava’s servers to provide a server-based configuration.  This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.  See class <code>KVATrackerConfig</code>.
///   </li>
///   <li>
///     <em>Consent</em> (var <code>consent</code>) — A feature which serves as an authority related to consent for the sharing of personal data.  See class KVAConsent in module KochavaCore.
///   </li>
///   <li>
///     <em>Crash Reporting</em> (var crashReporting) — A feature which can be used to report crashes.  Implemented in class KVACrashReporting.  Note:  This feature is not being compiled into the SDK at this time.  Please enquire with your Kochava client success manager if you are interested in this feature.
///   </li>
///   <li>
///     <em>Custom Identifiers</em> (var <code>customIdentifiers</code>) — A feature which is responsible for custom identifiers.  See class <code>KVACustomIdentifiers</code>.  Register a custom identifier by calling func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
///   </li>
///   <li>
///     <em>Datapoints</em> (var dataPoints) — A feature which is responsible for the collection of datapoints.  Datapoints provide insights about the device at the times when events are generated.  Implemented in internal class KVATrackerDataPoints.
///   </li>
///   <li>
///     <em>Deeplinks</em> (var <code>deeplinks</code>) — A feature which measures deeplink activity.  See class <code>KVADeeplinks</code>.  Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
///   </li>
///   <li>
///     <em>Device Id</em> (var <code>deviceId</code>) — A feature which is responsible for the identification of a device.  The managed id is referred to as the <em>Kochava Device Id</em>.  See class <code>KVADeviceId</code>.  Get the Kochava Device Id by getting class <code>KVADeviceId</code> var <code>KVADeviceId/string</code>.
///   </li>
///   <li>
///     <em>Events</em> (var <code>events</code>) — A feature which tracks user behavior and actions beyond the install.  See class <code>KVAEvents</code>.  Create and send events using any of the methods available in class <code>KVAEvent</code>.
///   </li>
///   <li>
///     <em>General</em> (var <code>general</code>) — A feature which encapsulates all of the general aspects of a tracker not belonging to any other encapsulated features.  Implemented in internal class <code>KVATrackerGeneral</code>.
///   </li>
///   <li>
///     <em>Identity Link</em> (var <code>identityLink</code>) — A feature which is responsible for linking identities.  See class <code>KVAIdentityLink</code>.  Register an identity link by calling class <code>KVAIdentityLink</code> func <code>KVAIdentityLink/register(withNameString:identifierString:)</code>.
///   </li>
///   <li>
///     <em>Install</em> (var <code>install</code>) — A feature which provides information about the install.  The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>config</code>.  See class <code>KVAInstall</code>.
///   </li>
///   <li>
///     <em>Logging</em> (var logging) — A feature which is responsible for tracker-specific logging activities.  Implemented in internal class KVATrackerLogging.  You can set the KVALog.shared.level to control what level of log messages are printed, as well as configure various other options through module KochavaCore class KVALog.
///   </li>
///   <li>
///     <em>Networking</em> (var <code>networking</code>) — A feature which provides networking support.  The networking instance manages the exchange of data between the client and various server(s), along with the associated tasks, network transactions, adapters, and instructions.  See class KVANetworking in module KochavaCore.
///   </li>
///   <li>
///     <em>Privacy</em> (var <code>privacy</code>) — A feature which is responsible for privacy.  See class <code>KVAPrivacy</code>.  Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
///   </li>
///   <li>
///     <em>Push Notifications</em> (var <code>pushNotifications</code>) — A feature which provides for the measurement of push notifications.  See class <code>KVAPushNotifications</code>.  Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
///   </li>
///   <li>
///     <em>Sessions</em> (var sessions) — A feature which provides for the measurement of sessions.  Implemented in internal class KVASessions.
///   </li>
///   <li>
///     <em>Updates</em> (var updates) — A feature which updates the server when there are changes to tracked components.  Implemented in internal class KVATrackerUpdates.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("KVATracker")
@interface KVATracker : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVASharedPropertyProvider, KVADeeplinksProcessorProvider, KVAEventSenderProvider, KVAPrivacyProfileRegistrarProvider, KVAPushNotificationsTokenRegistrarProvider>
/// A shared instance, for convenience.
/// This is the preferred way of using a tracker.  To complete the integration you must call func <code>start(withAppGUIDString:)</code> or func <code>start(withPartnerNameString:)</code>.  You may alternatively use a constructor to create your own tracker.  The shared instance provides a few benefits.  First, it simplifies your implementation as you do not need to store an instance to the tracker somewhere in a public location in your own code.  Second, it ensures that if your code unintentionally tries to make use of the shared instance prior to configuration that you can receive a warning in the log from the tracker.  If you use your own property to store the tracker, and it is nil, then this provision would not be automatically available to you.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVATracker * _Nonnull shared;)
+ (KVATracker * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// A shared instance, for convenience— optional.
/// See var <code>shared</code>.  This variable will be nil prior to the shared instance being defaulted.  This may be used to optionally invalidate any existing shared instance without causing it to first be defaulted in the process.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVATracker * _Nullable shared_optional;)
+ (KVATracker * _Nullable)shared_optional SWIFT_WARN_UNUSED_RESULT;
/// The shared instance, an ambiguated form of the var <code>shared</code> which conforms to protocol KVASharedPropertyProvider.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id _Nonnull sharedInstance;)
+ (id _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Create a tracker.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// class MyClass:
/// {
///     let tracker = KVATracker(storageIdString: "alternate")
/// }
///
/// \endcode\param storageIdString An optional storage identifier.  The storage identifier should be left unset (nil) unless you have a reason to not use the default storage space.  See default constructor KVATracker(), or in Objective-C see convenience constructor tracker.
///
- (nonnull instancetype)initWithStorageIdString:(NSString * _Nullable)storageIdString OBJC_DESIGNATED_INITIALIZER;
/// Create a tracker.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// class MyClass:
/// {
///     let tracker = KVATracker()
/// }
///
/// \endcode
- (nonnull instancetype)init;
/// Create a tracker— using modern Objective-C syntax.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// KVATracker *tracker = [KVATracker trackerWithStorageIdString:@"alternate"];
///
/// \endcodenote:
/// This convenience constructor exists for Objective-C and is expected to be removed in a future version.  In Swift you should use default constructor KVATracker(storageIdString:)— or preferably, the shared instance.
/// \param storageIdString An optional storage identifier.  The storage identifier should be left unset (nil) unless you have a reason to not use the default storage space.  See default constructor KVATracker(), or in Objective-C see convenience constructor tracker.
///
+ (nonnull instancetype)trackerWithStorageIdString:(NSString * _Nullable)storageIdString SWIFT_WARN_UNUSED_RESULT;
/// Create a tracker— using modern Objective-C syntax.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// note:
/// This convenience constructor exists for Objective-C and is expected to be removed in a future version.  In Swift you should use default constructor KVATracker()— or preferably, the shared instance.
/// <h2>Example</h2>
/// \code
/// KVATracker *tracker = KVATracker.tracker;
///
/// \endcode
+ (nonnull instancetype)tracker SWIFT_WARN_UNUSED_RESULT;
/// Decode from an object.
/// \param object An object from which to decode.  This object is generally expected to be the output of kva_as(forContext: .persistentStorage).
///
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Decode from an object, supporting filling into an existing initializedObject.
/// This implementation of static func kva_from(…) is special in that this class is viewed as being primarily a container for a set of feature components.  Each of these features takes care of themselves.  At this scope we are mainly setting the fromDictionary property, which will be used as needed when the feature components are brought online.  The principle place where that takes place is when the featureArray is configured, as each feature is added to the array.  To be added this requires them to be instantiated, and, when present, decoded.  See func featureArray_configure().
/// \param object An object from which to decode.  This object is generally expected to be the output of kva_as(forContext: .persistentStorage).
///
/// \param initializedObject An initialized object.  When this is provided it will fill an existing initialized object.  When this is nil a new blank instance will be created.
///
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
/// Encode for a specified context.
/// The returned value will typically be a dictionary formatted as JSON.
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Configure (update) the instance from another object.
/// This method is used to configure the instance.  It is the same method used to configure the instance when the config response is returned.  This is referring to kvinit.  It can also be called from the host to override (or else default) various parameters.  The structure of the object you provide has the same capability as that which the server may return.  Additionally you can wrap the parameters you provide in objects $override$, $override.append$, $default$, or $default.append$, to indicate how these options are treated relative to the server’s options.
/// $override$:  Elements within this object will override any options of the same name specified by the server.
/// $override.append$:  Elements within this object will append/override any previously established $override$.  $override$ does not need to be used first.
/// $default$:  Elements within this object will serve as a default for any options of the same name when not specified by the server.
/// $default.append$:  Elements within this object will append/override any previously established $default$.  $default$ does not need to be used first.
/// The following example will deny the collection of two datapoints, the idfa and idfv.  Ordinarily the best way to do this is through the Kochava dashboard, where these can be controlled within multiple version(s) of an app already in production.  However, if at build time you wanted to explicitly override server-side control, such that these two items effectively always appear in the deny datapoints list, the following code would do so:
/// <h2>Example</h2>
/// \code
/// // trackerConfigureObject
/// let trackerConfigureObject =
/// [
///     "$override.append$":
///     [
///         "privacy":
///         [
///             "deny_datapoints":
///             [
///                 "idfa",
///                 "idfv"
///             ]
///         ]
///     ]
/// ]
///
/// // KVATracker
/// KVATracker.shared.configure(with: trackerConfigureObject, context: KVAContext.host)
/// KVATracker.shared.start(withAppGUIDString: "koapple-sdk-h-random-sn4i")
///
/// \endcode\param object An object from which to configure the instance.  This is most commonly a JSON object.
///
/// \param context The context from which the object was provided.  In rare cases this may have some bearing on the proper interpretation of what was provided.
///
- (void)configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Configure (update) the instance from another object.
/// This function is equivalent to func configure(with:context) however this does not first dispatch to the globalSerial queue.  It is the protocol conformance of KVAConfigureWithProtocol.  You should not use this function directly unless you have a specific need to not perform the preferred dispatch.
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Start the tracker with an appGUIDString.
/// You may start a tracker with either an appGUIDString or a partnerNameString.  Most commonly this is done with an appGUIDString.  See also func <code>start(withPartnerNameString:)</code>.
/// <h2>Example</h2>
/// \code
/// KVATracker.shared.start(withAppGUIDString: "_YOUR_KOCHAVA_APP_GUID_")
///
/// \endcode\param appGUIDString A Kochava app GUID.
///
- (void)startWithAppGUIDString:(NSString * _Nonnull)appGUIDString;
/// Start the tracker with a partnerNameString.
/// You may start a tracker with either an appGUIDString or a partnerNameString.  Most commonly this is done with an appGUIDString.  See also func <code>start(withAppGUIDString:)</code>.
/// <h2>Examples</h2>
/// \code
/// KVATracker.shared.start(withPartnerNameString: "_YOUR_KOCHAVA_PARTNER_NAME_")
///
/// \endcode\param partnerNameString A Kochava partner name.
///
- (void)startWithPartnerNameString:(NSString * _Nonnull)partnerNameString;
/// Start the tracker.
/// An appGUIDString or partnerNameString must be set prior to making this call.  To do this, instead see func start(withAppGUIDString:) and func start(withPartnerNameString:).  This method is called by those two methods, and provides public conformance to protocol KVAStartable.  This method can be used to start an instance of a tracker which was created from decoded JSON.
- (void)start;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Execute an advanced instruction.
/// \param identifierString An identifier for the advanced instruction.
///
/// \param valueObject A value object for the advanced instruction.
///
- (void)executeAdvancedInstructionWithIdentifierString:(NSString * _Nonnull)identifierString valueObject:(id _Nullable)valueObject;
/// Invalidate the instance.
/// This is similar to allowing an instance of the tracker deallocate, but it can also be used on the shared instance.  It will additionally signal certain sub-systems to invalidate themselves, which can result in a more assured and immediate halt.  The scope of this invalidation is not absolute.  Certain sub-systems will continue to run for a period of time until they may gracefully complete.  When using this method with the shared instance, you are guaranteed to be re-defaulted a new instance the next time it is referenced, and you may immediately move forward to re-configure it.
/// When you are not using Intelligent Consent Management, this method can be used to signal that the tracker may no longer run following consent having been denied.  When used this way, you may re-configure a tracker if/when consent is granted.
- (void)invalidate;
/// Invalidate the instance.
/// See func <code>invalidate()</code>
- (void)invalidateWithPrintLogMessageBool:(BOOL)printLogMessageBool;
/// A feature which interfaces with Apple’s SKAdNetwork attribution system.
@property (nonatomic, readonly, strong) KVAAdNetwork * _Nullable adNetwork;
/// A feature which may be used to limit advertising tracking from the level of the application (or host).
@property (nonatomic, readonly, strong) KVAAppLimitAdTracking * _Nonnull appLimitAdTracking;
/// A boolean which indicates if you want to limit ad tracking at the application level (convenience).
/// This feature is related to the Limit Ad Tracking feature which is typically found on an Apple device under Settings, Privacy, Advertising.  In the same way that you can limit ad tracking through that setting, this feature provides a second and independent means for the host app to limit ad tracking by asking the user directly.  A value of false from either this feature or Apple’s will result in the limiting of ad tracking.
@property (nonatomic) BOOL appLimitAdTrackingBool;
/// A feature which interfaces with Apple’s App Tracking Transparency system.
@property (nonatomic, readonly, strong) KVAAppTrackingTransparency * _Nonnull appTrackingTransparency;
/// A feature which provides attribution information related to the install.
@property (nonatomic, readonly, strong) KVAAttribution * _Nonnull attribution;
/// A feature which is responsible for controlling and updating the configuration of the tracker.
/// This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.
@property (nonatomic, readonly, strong) KVATrackerConfig * _Nonnull config;
/// A feature which serves as an authority related to consent for the sharing of personal data.
/// Data sharing privacy laws such as GDPR require consent to be obtained before certain kinds of personal data may be collected or calculated, kept in memory, persisted or retained in persistent storage, and/or shared with partners.  During the natural lifecycle, there are times where partners may be added and cause the consent status to fall back to an unknown state.  Later the user may again be prompted and the consent status may (or may not) again come to be known.  All of this is predicated upon whether or not consent is required, which is governed by a variety of factors such as location.
@property (nonatomic, readonly, strong) KVAConsent * _Nonnull consent;
/// A feature which is responsible for custom identifiers.
/// Register a custom identifier by calling class <code>KVACustomIdentifiers</code> func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
@property (nonatomic, readonly, strong) KVACustomIdentifiers * _Nonnull customIdentifiers;
/// A feature which measures deeplink activity.
/// Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
@property (nonatomic, readonly, strong) KVADeeplinks * _Nonnull deeplinks;
/// A feature which is responsible for the identification of a device.
/// The managed id is referred to as the <em>Kochava Device Id</em>.  Get the Kochava Device Id by getting class <code>KVADeviceId</code> var <code>KVADeviceId/string</code>.
@property (nonatomic, readonly, strong) KVADeviceId * _Nonnull deviceId;
/// A property containing the unique device ID that was generated when the tracker was first initialized on the current install (convenience).
@property (nonatomic, readonly, copy) NSString * _Nullable deviceIdString;
/// A feature which is responsible for linking identities.
/// Register an identity link by calling class <code>KVAIdentityLink</code> func <code>KVAIdentityLink/register(withNameString:identifierString:)</code>.
@property (nonatomic, readonly, strong) KVAIdentityLink * _Nonnull identityLink;
/// A feature which provides information about the install.
/// The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>config</code>.
@property (nonatomic, readonly, strong) KVAInstall * _Nonnull install;
/// A feature which provides networking support.
/// The networking instance manages the exchange of data between the client and various server(s), along with the associated tasks, network transactions, adapters, and instructions.  See class KVANetworking in module KochavaCore.
@property (nonatomic, readonly, strong) KVANetworking * _Nonnull networking;
/// A feature which is responsible for privacy.
/// Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
@property (nonatomic, readonly, strong) KVAPrivacy * _Nonnull privacy;
/// A feature which provides for the measurement of push notifications.
/// Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
@property (nonatomic, readonly, strong) KVAPushNotifications * _Nonnull pushNotifications;
@property (nonatomic, readonly, strong) id <KVADeeplinksProcessor> _Nullable deeplinksProcessor;
@property (nonatomic, readonly, strong) id <KVAEventSender> _Nonnull eventSender;
@property (nonatomic, readonly, strong) id <KVAPrivacyProfileRegistrar> _Nonnull privacyProfileRegistrar;
@property (nonatomic, readonly, strong) id <KVAPushNotificationsTokenRegistrar> _Nonnull pushNotificationsTokenRegistrar;
/// A string used as a  storage identifier for the shared instance.
/// This is used to further qualify where in persistent storage the information for this instance is stored.  This property should not be used except in very specific circumstances.  Please contact your client success representative if you are interested in using this.  You would set this value to a short unique string consisting of regular alphanumeric characters.  Following deployment with a given storage identifer this should never be changed except to represent an entirely new integration.  If used, it is absolutely imperative that this value be consistently set prior to accessing the shared instance for the first time.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable sharedStorageIdString;)
+ (NSString * _Nullable)sharedStorageIdString SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedStorageIdString:(NSString * _Nullable)sharedStorageIdString;
/// A boolean which when true causes the instance to sleep.
/// The default is false.  When set to true, this causes tasks to effectively be suspended until this condition is lifted.  While this is set to true, tasks are not lost per-say;  however, if a task may have otherwise occurred multiple times, it may be represented only once once the condition is lifted.
@property (nonatomic) BOOL sleepBool;
/// A boolean indicating whether or not the instance has been started.
@property (nonatomic, readonly) BOOL startedBool;
@end


@interface KVATracker (SWIFT_EXTENSION(KochavaTracker)) <JSExport>
@end


/// A feature which is responsible for controlling and updating the configuration of the tracker.
/// This feature interfaces with Kochava’s servers to provide a server-based configuration.  This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.
SWIFT_CLASS_NAMED("KVATrackerConfig")
@interface KVATrackerConfig : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for the collection of datapoints.
SWIFT_CLASS_NAMED("KVATrackerDataPoints")
@interface KVATrackerDataPoints : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which encapsulates all of the general aspects of a tracker not belonging to any other encapsulated features.
SWIFT_CLASS_NAMED("KVATrackerGeneral")
@interface KVATrackerGeneral : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for tracker-specific logging activities.
/// You can set the KVALog.shared.level to control what level of log messages are printed, as well as configure various other options through module KochavaCore class KVALog.
SWIFT_CLASS_NAMED("KVATrackerLogging")
@interface KVATrackerLogging : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class KVAProduct;

/// A class which defines the tracker product.
/// A product in this context generally refers to the result of a build.
/// note:
/// This is currently overridden to be a subclass of NSObject rather than KVAProduct so that it can be represented in Objective-C.  If you use KVAProduct it will still build, but the automatic module registration will fail to locate the class.  You can see early evidence of the problem if you also make the shared property be of the class type, where the compiler will say that it cannot use @objc because it cannot be expressed in Objective-C.  This is apparently a problem that Swift has providing Objective-C compatibility to Swift classes which subclass other Swift classes across modules.  For example, KVACoreProduct does not have this problem, presumably because it’s in the same module as KVAProduct.  In order to convert this class to subclass KVAProduct, or to subsequently allow shared to be of the class’ type, a means of registering/loading the class as a Swift-only class would be required.  More importantly, however, we’d need to give up public Objective-C support.  Since that doesn’t seem possible, the only alternative would be that Apple fixes this issue and provides the necessary support, assuming that’s possible.
SWIFT_CLASS_NAMED("KVATrackerProduct")
@interface KVATrackerProduct : NSObject <KVASharedPropertyProvider>
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAProduct * _Nonnull shared;)
+ (KVAProduct * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id _Nonnull sharedInstance;)
+ (id _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the parameters for the tracker product.
SWIFT_CLASS("_TtC14KochavaTracker23KVATrackerProductParams")
@interface KVATrackerProductParams : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A feature which updates the server when there are changes to tracked components.
SWIFT_CLASS_NAMED("KVATrackerUpdates")
@interface KVATrackerUpdates : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef KOCHAVATRACKER_SWIFT_H
#define KOCHAVATRACKER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppTrackingTransparency;
@import Foundation;
@import JavaScriptCore;
@import KochavaCore;
@import ObjectiveC;
#endif

#import <KochavaTracker/KochavaTracker.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KochavaTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class KVAContext;
@class KVANetworking;
@class NSDate;
@protocol KVAMutable;
@class KVAEvent;
@protocol KVAAsForContextProtocol;
@class KVAAdNetworkConversion;

/// A feature which interfaces with Apple’s SKAdNetwork attribution system.
SWIFT_CLASS_NAMED("KVAAdNetwork")
@interface KVAAdNetwork : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)configureWithNetworking:(KVANetworking * _Nonnull)networking measurementWindowStartDate:(NSDate * _Nullable)measurementWindowStartDate delegate:(id <KVAMutable> _Nullable)delegate;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (id <KVAAsForContextProtocol, KVAFromProtocol> _Nullable)eventNetTransactionWillStartRequestWithNoAdNetworkConversionResult:(KVAEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (void)invalidate;
/// A closure which is called when the SKAdNetwork registerAppForAdNetworkAttribution API has been called.
/// Your code should assume that if some action needs to be performed on the main queue that it should first dispatch asynchronously to it.
@property (nonatomic, copy) void (^ _Nullable didRegisterAppForAttributionBlock)(KVAAdNetwork * _Nonnull);
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// The current conversion information.
@property (nonatomic, strong) KVAAdNetworkConversion * _Nonnull conversion;
@end

@class KVAAdNetworkConversionResult;

/// A feature which determines adnetwork conversion(s).
SWIFT_CLASS_NAMED("KVAAdNetworkConversion")
@interface KVAAdNetworkConversion : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A closure which is called when the SKAdNetwork updateConversionValue API has been called.
/// Your code should assume that if some action needs to be performed on the main queue that it should first dispatch asynchronously to it.
@property (nonatomic, copy) void (^ _Nullable didUpdateValueBlock)(KVAAdNetworkConversion * _Nonnull, KVAAdNetworkConversionResult * _Nonnull);
/// The current conversion result.
/// This object will mutate when the current result is updated.  If you want a immutable picture then you should take a copy.
@property (nonatomic, strong) KVAAdNetworkConversionResult * _Nonnull result;
@end


/// A class which defines an adnetwork conversion event.
SWIFT_CLASS_NAMED("KVAAdNetworkConversionEvent")
@interface KVAAdNetworkConversionEvent : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class NSNumber;

/// The adnetwork conversion result.
SWIFT_CLASS_NAMED("KVAAdNetworkConversionResult")
@interface KVAAdNetworkConversionResult : NSObject <NSCopying, KVAConfigureWithProtocol, KVAFromProtocol, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Return the conversion value integer which is used with the SKAdNetwork updateConversionValue API.
/// Apple currently restricts this value to 6-bits.  This is a combination (OR) of the translated value (translatedValueIntNumber) with any extension interval value (extensionIntervalTranslatedValueInt.integerValue).
- (NSInteger)valueInt SWIFT_WARN_UNUSED_RESULT;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A string which represents the model used for the conversion.
@property (nonatomic, readonly, copy) NSString * _Nullable modelString;
@property (nonatomic, readonly, strong) NSNumber * _Nullable translatedValueIntNumber;
/// A number representing the raw value.
/// This is a raw value which has not had any translations applied yet.  This also does not include any extension interval value (extensionIntervalTranslatedValueInt).
@property (nonatomic, strong) NSNumber * _Nullable rawValueNumber;
@end


/// A feature which provides measurement for App Clips.
SWIFT_CLASS_NAMED("KVAAppClips")
@interface KVAAppClips : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which may be used to limit advertising tracking from the level of the application (or host).
SWIFT_CLASS_NAMED("KVAAppLimitAdTracking")
@interface KVAAppLimitAdTracking : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A boolean which indicates if you want to limit ad tracking at the application level.
/// This feature is related to the Limit Ad Tracking feature which is typically found on an Apple device under Settings, Privacy, Advertising.  In the same way that you can limit ad tracking through that setting, this feature provides a second and independent means for the host app to limit ad tracking by asking the user directly.  A value of true from either this feature or Apple’s will result in the limiting of ad tracking.
@property (nonatomic) BOOL boolean;
@end


/// A feature which interfaces with Apple’s App Tracking Transparency system.
SWIFT_CLASS_NAMED("KVAAppTrackingTransparency")
@interface KVAAppTrackingTransparency : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Notify that a request for tracking authorization did complete.
/// \param authorizationStatus The provided authorization status.
///
- (void)authorizationDidCompleteWithStatus:(ATTrackingManagerAuthorizationStatus)authorizationStatus SWIFT_AVAILABILITY(ios_app_extension,introduced=14.0) SWIFT_AVAILABILITY(tvos,introduced=14.0) SWIFT_AVAILABILITY(maccatalyst,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A boolean which indicates if the instance should automatically request tracking authorization.
/// Default true.  Subject to server-based override.  Also subject to enabledBool.  See enabledBool.
@property (nonatomic) BOOL autoRequestTrackingAuthorizationBool;
/// A time interval to wait for the request for tracking authorization before proceeding to send the install.
/// Default 30.0.  Subject to server-based override.  This provides time to wait to obtain the authorization necessary to collect the IDFA.
@property (nonatomic) NSTimeInterval authorizationStatusWaitTimeInterval;
@property (nonatomic) BOOL enabledBool;
/// The authorization status expressed as an NSString.
/// This is optional and will be nil until a status is known.  For this reason this can be checked as a means of determining if a status has been determined.  Current possible values:  “authorized”, “denied”, “notDetermined”, “restricted”, “unknown”.
@property (nonatomic, readonly, copy) NSString * _Nullable authorizationStatusString;
@end


/// A feature which interfaces with Apple Search Ads.
SWIFT_CLASS_NAMED("KVAAppleSearchAds")
@interface KVAAppleSearchAds : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Configure the instance for use.
/// \param networking An instance of class KVANetworking.
///
/// \param delegate A delegate.
///
- (void)configureWithNetworking:(KVANetworking * _Nonnull)networking delegate:(id <KVAMutable> _Nonnull)delegate;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for attribution through Apple’s Apple Search Ads method 2.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod2")
@interface KVAAppleSearchAdsMethod2 : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator>
+ (nonnull instancetype)appleSearchAdsMethod2Attribution SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Apple’s attribution as provided by Apple Search Ads method 2.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod2Attribution")
@interface KVAAppleSearchAdsMethod2Attribution : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for attribution through Apple’s Apple Search Ads method 3.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod3")
@interface KVAAppleSearchAdsMethod3 : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAInvalidatable, KVAMutableDelegator>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Apple’s attribution as provided by Apple Search Ads method 3.
SWIFT_CLASS_NAMED("KVAAppleSearchAdsMethod3Attribution")
@interface KVAAppleSearchAdsMethod3Attribution : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KVAAttributionResult;

/// A feature which provides attribution information related to the install.
SWIFT_CLASS_NAMED("KVAAttribution")
@interface KVAAttribution : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Get the attribution result with a completion handler.
/// \param completionHandler A completion handler to call once the result has been retrieved.
///
- (void)retrieveResultWithCompletionHandler:(void (^ _Nonnull)(KVAAttributionResult * _Nonnull))completionHandler;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A closure which is called when attribution is retrieved.
@property (nonatomic, copy) void (^ _Nullable closure_didRetrieveResult)(KVAAttribution * _Nonnull, KVAAttributionResult * _Nonnull);
/// A boolean indicating if an attribution result should be retrieved.
/// This boolean does not need to be set if you are using func <code>retrieveResult(withCompletionHandler:)</code> to retrieve the attribution result.  It needs to be set if you intend to set var <code>closure_didRetrieveResult-swift.property</code> and then wait for it to be called.
@property (nonatomic) BOOL retrieveResultBool;
/// The current attribution result.
/// When accessed this property will contain whatever value may have been previously collected.  For a current value which may initiate new asynchronous collection see func <code>retrieveResult(withCompletionHandler:)</code>
@property (nonatomic, readonly, strong) KVAAttributionResult * _Nonnull result;
@end


/// The attribution result.
SWIFT_CLASS_NAMED("KVAAttributionResult")
@interface KVAAttributionResult : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// A boolean indicating if the result attributed the install.
@property (nonatomic, readonly) BOOL attributedBool;
/// A boolean indicating if the current install is the first install.
@property (nonatomic, readonly) BOOL firstInstallBool;
/// A dictionary containing the raw result information.
@property (nonatomic, readonly, copy) NSDictionary * _Nullable rawDictionary;
/// A boolean indicating if the result was successfully retrieved.
@property (nonatomic, readonly) BOOL retrievedBool;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which is responsible for custom identifiers.
/// Register a custom identifier by calling func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
SWIFT_CLASS_NAMED("KVACustomIdentifiers")
@interface KVACustomIdentifiers : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Register a custom identifier.
/// In order to send a custom identifier it must be whitelisted on your account.
/// \param nameString The name of the identifier.
///
/// \param identifierString The identifier.
///
- (void)registerWithNameString:(NSString * _Nonnull)nameString identifierString:(NSString * _Nonnull)identifierString;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class NSURL;
@protocol KVADeeplinksProcessorProvider;

/// A deeplink.
SWIFT_CLASS_NAMED("KVADeeplink")
@interface KVADeeplink : NSObject <KVAFromProtocol>
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param timeoutTimeInterval A time interval after which to timeout and return whatever result we have.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param processor An array of KVADeeplinksProcessorProvider to which to add the token.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url processor:(id <KVADeeplinksProcessorProvider> _Nullable)processor completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
/// Create a deeplink and then process it.
/// \param url The deep link url as provided.
///
/// \param timeoutTimeInterval A time interval after which to timeout and return whatever result we have.
///
/// \param processor An array of KVADeeplinksProcessorProvider to which to add the token.
///
/// \param completionHandler A closure to be called when processing is complete.
///
+ (void)processWithURL:(NSURL * _Nullable)url timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval processor:(id <KVADeeplinksProcessorProvider> _Nullable)processor completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The deeplink url as provided by the operating system.
@property (nonatomic, copy) NSString * _Nullable urlString;
/// The destination for the deeplink.
@property (nonatomic, copy) NSString * _Nullable destinationString;
/// A dictionary containing raw information about the deeplink.
@property (nonatomic, copy) NSDictionary * _Nullable rawDictionary;
@end


SWIFT_PROTOCOL("_TtP14KochavaTracker21KVADeeplinksProcessor_")
@protocol KVADeeplinksProcessor
/// Process a deeplink.
/// \param deeplink An instance of KVADeeplink.
///
/// \param timeoutTimeInterval A timeout time interval.
///
/// \param completionHandler A completion handler to call when processing is complete.
///
- (void)processDeeplink:(KVADeeplink * _Nonnull)deeplink timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
@end


/// A feature which measures deeplink activity.
/// Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
SWIFT_CLASS_NAMED("KVADeeplinks")
@interface KVADeeplinks : NSObject <NSCopying, KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVADeeplinksProcessor>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Process a deeplink.
/// \param deeplink An instance of KVADeeplink.
///
/// \param timeoutTimeInterval A timeout time interval.
///
/// \param completionHandler A completion handler to call when processing is complete.
///
- (void)processDeeplink:(KVADeeplink * _Nonnull)deeplink timeoutTimeInterval:(NSTimeInterval)timeoutTimeInterval completionHandler:(KVADeeplinkProcessCompletionHandler _Nullable)completionHandler;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end



SWIFT_PROTOCOL("_TtP14KochavaTracker29KVADeeplinksProcessorProvider_")
@protocol KVADeeplinksProcessorProvider
/// A property which conforms to protocol KVADeeplinksProcessor.
@property (nonatomic, readonly, strong) id <KVADeeplinksProcessor> _Nullable deeplinksProcessor;
@end


/// A feature which is responsible for the identification of a device.
/// The managed id is referred to as the <em>Kochava Device Id</em>.  Get the Kochava Device Id by getting var <code>string</code>.
SWIFT_CLASS_NAMED("KVADeviceId")
@interface KVADeviceId : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)kva_didMutate_performSideEffectsWithChildObject:(id _Nullable)childObject infoDictionary:(NSDictionary * _Nullable)infoDictionary;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// A property containing the unique device ID that was generated when the tracker was first initialized on the current install.
@property (nonatomic, readonly, copy) NSString * _Nullable string;
@end

@class KVAEventType;
@protocol KVAEventSenderProvider;
@class KVAConsent;
@class NSDecimalNumber;

/// The class KVAEvent provides a means of defining a post-install event, providing standardized parameters.
/// Sending events is not required.  To track installation information, you do not need to do anything more than to start a tracker.  Still, many advertisers want to understand and correlate the relationship between conversion and attribution source information with user activity.  This can only be done by tracking events.
/// Events can be sent from anywhere within the application.  Events will be coupled with device datapoints and general application information.  If they cannot be sent immediately to Kochava they will be queued and retried later.
/// The KVAEvent class defines an individual event, providing a variety of standardized event types and parameters.  Standard event types may represent a purchase, the completion of a level, an achievement, etc.  Standard parameters may represent a currency, price, level, etc.
/// The use of standard event types and parameters maximizes parity with external analytics partners and ensures optimal reporting and analytical output via the Kochava platform.  If the data you are sending in events can be sent using standard event types and parameters we recommend you do so.
SWIFT_CLASS_NAMED("KVAEvent")
@interface KVAEvent : NSObject <KVAFromProtocol>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (KVAEvent * _Nonnull)eventWithType:(KVAEventType * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
+ (KVAEvent * _Nonnull)eventWithTypeNameString:(NSString * _Nonnull)typeNameString SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Send the event using the default KVAEventSenderProvider.
/// The default is the shared instance of class <code>KVATracker</code>.
- (void)send;
/// Send the event with a specified array of KVAEventSenderProvider(s).
- (void)sendWithSenderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderProviderArray;
/// Return a string representation of the name of the event.
/// a.k.a.  “event_name”
- (NSString * _Nonnull)eventNameString SWIFT_WARN_UNUSED_RESULT;
/// Return any valueObject for a given propertyIdentifierString.
/// \param propertyIdentifierString A string which generally would be equivalent to the name of the key of the property as it would appear in the event payload.
///
- (id _Nullable)valueObjectForPropertyIdentifierString:(NSString * _Nullable)propertyIdentifierString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)subURLIdString SWIFT_WARN_UNUSED_RESULT;
/// An ad network conversion result.
/// Qualifying events are ammended with this property just prior to starting a send request.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic, strong) id <KVAAsForContextProtocol, KVAFromProtocol> _Nullable adNetworkConversionResult;
/// A type for the event
/// Although these types are standardized, custom events are designated using type .custom.
@property (nonatomic, readonly, strong) KVAEventType * _Nonnull eventType;
/// A boolean indicating if a dispatch should occur when the event is sent.
/// Default true.  The default behavior dispatches the sending of an event to the default queue that should be used when sending the event (i.e. KVADispatchQueue.globalSerial).  If it is known that you are already on the appropriate queue, you may set this to true to avoid an additional dispatch.  This can have the effect of fine tuning behavior to ensure that related operations essentially occur atomically.  It is important to not use this feature if you are not on the appropriate queue already.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic) BOOL sendDispatchBool;
/// A boolean indicating if a LogMessage should be printed when the event is sent.
/// Default true.  The default behavior prints a log message when the event is sent.  The corresponding log message is presented as though the event was sent by a call from the host.  This boolean can be set to false so that the event will be sent silently, and not appear as though it was sent by a call the host.
/// note:
/// This API is public in order to make it available for the internal use of modules within the Kochava SDK.  It should not be used unless otherwise directed by Kochava.
@property (nonatomic) BOOL sendPrintLogMessageBool;
/// A boolean which when set will cause the event to be serviced locally when sent.
/// When serviced locally the response for the request is provided locally and the request is post the event to the server is never made.  In every other respect the effects are the same.  AdNetwork conversion information is still calculated.
@property (nonatomic) BOOL serviceLocallyBool;
/// A property containing an action string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable actionString;
/// A property containing an ad campaign identifier string.
/// This is expected to contain a string corresponding to an ad campaign identifier.
@property (nonatomic, copy) NSString * _Nullable adCampaignIdString;
/// A property containing an ad campaign name string.
/// This is expected to contain a string corresponding to an ad campaign name.
@property (nonatomic, copy) NSString * _Nullable adCampaignNameString;
/// A property containing an ad device type string.
/// This is expected to contain a string corresponding to a device type.
@property (nonatomic, copy) NSString * _Nullable adDeviceTypeString;
/// A property containing an ad group identifier string.
/// This is expected to contain a string corresponding to an ad group identifier.
@property (nonatomic, copy) NSString * _Nullable adGroupIdString;
/// A property containing an ad group name string.
/// This is expected to contain a string corresponding to an ad group name.
@property (nonatomic, copy) NSString * _Nullable adGroupNameString;
/// A property containing an ad mediation network name string.
/// This is expected to contain a standardized string corresponding to an advertising network.  It is the name of the network that was used during mediation.
@property (nonatomic, copy) NSString * _Nullable adMediationNameString;
/// A property containing an ad network name string.
/// This is expected to contain a standardized string corresponding to an advertising network.
@property (nonatomic, copy) NSString * _Nullable adNetworkNameString;
/// A property containing an ad placement string.
/// This is expected to contain a string corresponding to an ad placement, ad unit, etc.
@property (nonatomic, copy) NSString * _Nullable adPlacementString;
/// A property containing an ad size string.
/// This is expected to contain a string corresponding to an ad size.
@property (nonatomic, copy) NSString * _Nullable adSizeString;
/// A property containing an ad type string.
/// This is expected to contain a string corresponding to an ad type.
@property (nonatomic, copy) NSString * _Nullable adTypeString;
/// A boolean indicating that this event originated from an Apple Watch.
@property (nonatomic) BOOL appleWatchBool;
/// A string containing a unique identifier associated with the Apple Watch from which this event originated.
/// Optional.  You may set this property in addition to appleWatchBool if you have a unique identifier associated with the watch.
@property (nonatomic, copy) NSString * _Nullable appleWatchIdString;
/// A property containing an App Store receipt which has been converted into a base64 encoded string.
/// The format of the information is expected to be that which is provided by the main bundle’s appStoreReceiptURL method, the data of which being loaded and base-64-string-encoded.
@property (nonatomic, copy) NSString * _Nullable appStoreReceiptBase64EncodedString;
/// A property containing a boolean wrapped in an NSNumber which indicates that something is background.
/// This is expected to contain a boolean which indicates if something is background, or occurred while in the background.  This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable backgroundBoolNumber;
/// A property indicating whether a checkout took place as a guest.
/// This is generally taken to be a boolean, but it is passed as a string so that you can provide more than two states.  Suggested values are “true” and “false”, but can also be values such as “yes”, “no”, or “partial”.
@property (nonatomic, copy) NSString * _Nullable checkoutAsGuestString;
/// A property containing a boolean wrapped in an NSNumber which indicates that something is completed.
/// This is expected to contain a boolean which indicates if something is completed.  This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable completedBoolNumber;
/// An instance of KVAConsent.
@property (nonatomic, strong) KVAConsent * _Nullable consent;
/// A property containing a content identifier string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable contentIdString;
/// A property containing a content type string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable contentTypeString;
/// A property containing a currency type string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable currencyString;
/// A property containing a custom event name string.
/// Standardized event names are automatically determined from the event type enum.  If an appropriate event type is not present, you may set the event type to KVAEventType.custom and the customEventNameString property to your custom event name string.  Event names do not need to be pre-registered.  They can be any alphanumeric string value which does not begin with an underscore.  NOTE: Prepending an event name with an underscore is a convention reserved for Kochava system events. (i.e. _INSTALL)
@property (nonatomic, copy) NSString * _Nullable customEventNameString;
/// A property containing a date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable date;
/// A property containing a date string.  “dateString” can be used as an alternate to “date” when a specific date format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable dateString;
/// A property containing a description.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable descriptionString;
/// A property containing a destination.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable destinationString;
/// A property that contains a duration.  It is a time interval that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable durationTimeIntervalNumber;
/// A property that contains an end date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable endDate;
/// A property that contains an end date.  “endDateString” can be used as an alternate to “endDate” when a specific date format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable endDateString;
/// A property containing an informational dictionary of key/value pairs.
/// A information dictionary.  The keys and values can be any alphanumeric string value.  This field has an entirely generic quality, in that it can contain whatever you consider to be fitting value.  The dictionary should not contain sub-dictionaries.
@property (nonatomic, copy) NSDictionary * _Nullable infoDictionary;
/// A property containing an informational string.
/// A informational string.  This can be any alphanumeric string value.  This field has an entirely generic quality, in that it can contain whatever you consider to be fitting value.
/// If the string passed is all numeric (and may include a decimal point), Kochava will automatically sum the amounts passed for the same nameString.  For example, if you sent the purchase amount of in-app purchases in infoString and named nameString “IAP – Purchase Price”, Kochava would add up all the purchase amounts for you and present them as a total for “IAP – Purchase Price”.  Regardless of what is passed in infoString, Kochava’s user dashboard will let you access all the data passed in infoString for any nameString, and present a count of all times an event was sent passing any given nameString.
/// NOTE: If you pass a string of JSON represented data, only the root level (no nested chunks) is stored.  Also, a limit of 75 characters is applied for a non-JSON-decodable string passed as an event infoString.
@property (nonatomic, copy) NSString * _Nullable infoString;
/// A property that contains an indication of where an item as added from.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable itemAddedFromString;
/// A property that contains a level.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable levelString;
/// A property that contains a maximum rating value.  It is a double that is wrapped in an NSNumber.  This property is used in conjunction with ratingValueDoubleNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable maxRatingValueDoubleNumber;
/// A property that contains a name.  It can be a human name or the name of any other item type.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  It can be a person’s name or the name of any other object.
@property (nonatomic, copy) NSString * _Nullable nameString;
/// A property that contains an order id.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable orderIdString;
/// A property that contains an origin.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable originString;
/// A property that contains a payload in the form of a dictionary.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDictionary * _Nullable payloadDictionary;
/// A property that contains a price.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  Because it uses an NSDecimalNumber, it is better suited for preserving decimal precision than priceDoubleNumber.  priceDecimalNumber and priceDoubleNumber share the same key when sent to the server.  If both are set, the value within priceDecimalNumber will win.
@property (nonatomic, strong) NSDecimalNumber * _Nullable priceDecimalNumber;
/// A property that contains a price.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  In order to better preserve decimal precision, see priceDecimalNumber.  priceDecimalNumber and priceDoubleNumber share the same key when sent to the server.  If both are set, the value within priceDecimalNumber will win.
@property (nonatomic, strong) NSNumber * _Nullable priceDoubleNumber;
/// A property that contains a quantity.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable quantityDoubleNumber;
/// A property that contains a rating value.  It is a double that is wrapped in an NSNumber.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, strong) NSNumber * _Nullable ratingValueDoubleNumber;
/// A property that contains a receipt id.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable receiptIdString;
/// A property that contains where something was referred from.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable referralFromString;
/// A property that contains a registration method.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable registrationMethodString;
/// A property that contains results.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable resultsString;
/// A property that contains a score.  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable scoreString;
/// A property that contains a search term (or terms).  It is a string that can contain any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable searchTermString;
/// A property that contains a source string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable sourceString;
/// A property that contains a spatial coordinate’s x value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialXDoubleNumber;
/// A property that contains a spatial coordinate’s y value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialYDoubleNumber;
/// A property that contains a spatial coordinate’s z value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.  One such application is to record the occurrence of events in 3D Gamespace.
@property (nonatomic, strong) NSNumber * _Nullable spatialZDoubleNumber;
/// A property that contains a start date.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSDate * _Nullable startDate;
/// A property that contains a start date.  “startDateString” is a string that can be used as an alternate to “startDate” when a specific display format is desired.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable startDateString;
/// A property that contains a success string.  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable successString;
/// A property that contains a user id.  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable userIdString;
/// A property that contains a URI (or URL) string.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable uriString;
/// A property that contains a username.  This is intended to be used to store an account-syle username, as opposed to a user’s name (compare “nameString”).  It is a string that can be any alphanumeric value.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable userNameString;
/// A property that contains a validated string.  It is a string that is intended to contain a boolean-like value, such as “true” or “false”.  It can also contain other  custom values such as “partial”.
/// This field has a somewhat generic quality, in that it can contain whatever you consider to be fitting value.
@property (nonatomic, copy) NSString * _Nullable validatedString;
@end


@interface KVAEvent (SWIFT_EXTENSION(KochavaTracker)) <JSExport>
@end


@interface KVAEvent (SWIFT_EXTENSION(KochavaTracker))
/// Create an instance of class KVAEvent which has a customEventNameString, and then send it.
/// \param customEventNameString A string containing the event name.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString;
/// Create an instance of class KVAEvent which has a customEventNameString, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoDictionary, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoDictionary, and then send it.
/// \param customEventNameString A string containing the event name.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoString, and then send it.
/// \param customEventNameString A string containing event name.
///
/// \param infoString An info string.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString;
/// Create an instance of class KVAEvent which has a customEventNameString and an optional infoString, and then send it.
/// \param customEventNameString A string containing event name.
///
/// \param infoString A custom string.  It may be an unnested (single dimensional) dictionary converted to a JSON formatted string.
///
/// \param senderArray Optional.  An array of senders.  These are objects which conform to protocol KVAEventSenderProvider.  If this parameter is not passed the default sender will be used.  The default sender is the shared instance of class KVATracker, which if you are using you may simply your call by using the function of the same name which omits this parameter.
///
+ (void)sendCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString senderArray:(NSArray<id <KVAEventSenderProvider>> * _Nullable)senderArray;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
/// \param infoDictionary A dictionary (single dimensional) containing any number of values with keys.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString infoDictionary:(NSDictionary * _Nullable)infoDictionary SWIFT_WARN_UNUSED_RESULT;
/// Create an instance of class KVAEvent with event type KVAEventType.custom.
/// \param customEventNameString A custom event name string.
///
/// \param infoString An info string.
///
- (nonnull instancetype)initCustomWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString;
/// Create an instance of class KVAEvent with event type KVAEventType.custom— using modern Objective-C syntax.
/// \param customEventNameString A custom event name string.
///
/// \param infoString An info string.
///
+ (nonnull instancetype)customEventWithNameString:(NSString * _Nonnull)customEventNameString infoString:(NSString * _Nullable)infoString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("KVAEventSender")
@protocol KVAEventSender
/// Send an event from the device to the appropriate server(s).
/// \param event A KVAEvent configured with the values you want to associate with the event.
///
- (void)sendEvent:(KVAEvent * _Nonnull)event;
@end


SWIFT_PROTOCOL_NAMED("KVAEventSenderProvider")
@protocol KVAEventSenderProvider
/// A property which conforms to protocol KVAEventSender.
@property (nonatomic, readonly, strong) id <KVAEventSender> _Nonnull eventSender;
@end


/// A class which defines an event type.
SWIFT_CLASS_NAMED("KVAEventType")
@interface KVAEventType : NSObject <KVAFromProtocol>
/// An event type which signifies that an item was added to a cart.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull addToCart;)
+ (KVAEventType * _Nonnull)addToCart SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was added to a wish list.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull addToWishList;)
+ (KVAEventType * _Nonnull)addToWishList SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an achievement was achieved.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull achievement;)
+ (KVAEventType * _Nonnull)achievement SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a checkout was started.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull checkoutStart;)
+ (KVAEventType * _Nonnull)checkoutStart SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a customEventNameString will be supplied.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull custom;)
+ (KVAEventType * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a level was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull levelComplete;)
+ (KVAEventType * _Nonnull)levelComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a purchase was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull purchase;)
+ (KVAEventType * _Nonnull)purchase SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was rated.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull rating;)
+ (KVAEventType * _Nonnull)rating SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a registration was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull registrationComplete;)
+ (KVAEventType * _Nonnull)registrationComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a search was performed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull search;)
+ (KVAEventType * _Nonnull)search SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a tutorial was completed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull tutorialComplete;)
+ (KVAEventType * _Nonnull)tutorialComplete SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an item was viewed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull view;)
+ (KVAEventType * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an ad was viewed.  You may use this in any equivalent circumstance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull adView;)
+ (KVAEventType * _Nonnull)adView SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a push notification was received.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull pushReceived;)
+ (KVAEventType * _Nonnull)pushReceived SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a push notification was opened.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull pushOpened;)
+ (KVAEventType * _Nonnull)pushOpened SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that consent was granted.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull consentGranted;)
+ (KVAEventType * _Nonnull)consentGranted SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that there was a deep link.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull deeplink;)
+ (KVAEventType * _Nonnull)deeplink SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that an ad was clicked.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull adClick;)
+ (KVAEventType * _Nonnull)adClick SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that a trial was started.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull startTrial;)
+ (KVAEventType * _Nonnull)startTrial SWIFT_WARN_UNUSED_RESULT;
/// An event type which signifies that there was a subscription.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAEventType * _Nonnull subscribe;)
+ (KVAEventType * _Nonnull)subscribe SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The name.
/// Examples:  “Add to Cart”, “Add to Wish List”, “Achievement”, etc.
@property (nonatomic, readonly, copy) NSString * _Nonnull nameString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which tracks user behavior and actions beyond the install.
SWIFT_CLASS_NAMED("KVAEvents")
@interface KVAEvents : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAEventSender>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)sendEvent:(KVAEvent * _Nonnull)event;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for linking identities.
/// Register an identity link using class func <code>register(withNameString:identifierString:)</code>.
SWIFT_CLASS_NAMED("KVAIdentityLink")
@interface KVAIdentityLink : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
/// Register an identity link.
/// note:
/// When used, and when possible, this method should be called before (or as soon as possible after) the tracker is started.  This helps to ensure that your identity values are associated with your install.
/// \param nameString The name of the identifier.
///
/// \param identifierString The identifier.
///
- (void)registerWithNameString:(NSString * _Nonnull)nameString identifierString:(NSString * _Nonnull)identifierString;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which provides information about the install.
/// The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>KVATracker/config</code>.
SWIFT_CLASS_NAMED("KVAInstall")
@interface KVAInstall : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
/// The date that the install did start first.
/// This will be nil until the first time that the start function for the tracker has executed.
@property (nonatomic, copy) NSDate * _Nullable didStartFirstDate;
@end

@class KVAPrivacyProfile;

SWIFT_PROTOCOL_NAMED("KVAPrivacyProfileRegistrar")
@protocol KVAPrivacyProfileRegistrar
- (void)registerProfile:(KVAPrivacyProfile * _Nonnull)profile;
@end


/// A feature which is responsible for privacy.
/// Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
SWIFT_CLASS_NAMED("KVAPrivacy")
@interface KVAPrivacy : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAPrivacyProfileRegistrar>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Register a profile.
/// \param profile The profile to register.
///
- (void)registerProfile:(KVAPrivacyProfile * _Nonnull)profile;
/// Set a boolean indicating if the specified profile name is enabled.
/// See method register(profile:).
/// \param profileNameString The name of a profile.
///
/// \param enabledBool A boolean indicating if enabled.
///
- (void)setEnabledBoolForProfileNameString:(NSString * _Nonnull)profileNameString enabledBool:(BOOL)enabledBool;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@protocol KVAPrivacyProfileRegistrarProvider;

/// A privacy profile.
SWIFT_CLASS_NAMED("KVAPrivacyProfile")
@interface KVAPrivacyProfile : NSObject <KVAFromProtocol>
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacy profile.
///
/// \param payloadKeyStringArray An array of payload keys (datapoint identifiers).
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray;
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacy profile.
///
/// \param payloadKeyStringArray An array of payload keys (datapoint identifiers).
///
/// \param registrarArray An array of KVAPrivacyProfileRegistrarProvider to which to register the privacy profile.
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray registrarArray:(NSArray<id <KVAPrivacyProfileRegistrarProvider>> * _Nullable)registrarArray;
/// Create a privacy profile and then register it.
/// \param nameString The name of the privacyProfile.
///
/// \param payloadKeyStringArray An array of datapoint identifiers.
///
/// \param payloadIdStringArray An array of payload identifiers.
///
/// \param registrarArray An array of KVAPrivacyProfileRegistrarProvider to which to register the KVAPrivacyProfile.
///
+ (void)registerWithNameString:(NSString * _Nonnull)nameString payloadKeyStringArray:(NSArray<NSString *> * _Nullable)payloadKeyStringArray payloadIdStringArray:(NSArray<NSString *> * _Nullable)payloadIdStringArray registrarArray:(NSArray<id <KVAPrivacyProfileRegistrarProvider>> * _Nullable)registrarArray;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// A unique name string.
@property (nonatomic, readonly, copy) NSString * _Nonnull nameString;
/// An array of payload keys (datapoint identifiers).
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable payloadKeyStringArray;
/// An array of payload identifiers (network transaction types).
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable payloadIdStringArray;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("KVAPrivacyProfileRegistrarProvider")
@protocol KVAPrivacyProfileRegistrarProvider
/// A property which conforms to protocol KVAPrivacyProfileRegistrar.
@property (nonatomic, readonly, strong) id <KVAPrivacyProfileRegistrar> _Nonnull privacyProfileRegistrar;
@end

@class KVAPushNotificationsToken;

SWIFT_PROTOCOL("_TtP14KochavaTracker34KVAPushNotificationsTokenRegistrar_")
@protocol KVAPushNotificationsTokenRegistrar
- (void)registerToken:(KVAPushNotificationsToken * _Nonnull)token;
@end


/// A feature which provides for the measurement of push notifications.
/// Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
SWIFT_CLASS_NAMED("KVAPushNotifications")
@interface KVAPushNotifications : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable, KVAPushNotificationsTokenRegistrar>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)registerToken:(KVAPushNotificationsToken * _Nonnull)token;
- (void)invalidate;
/// A boolean indicating if push notifications is enabled.
@property (nonatomic) BOOL enabledBool;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class NSData;
@protocol KVAPushNotificationsTokenRegistrarProvider;

/// A push notifications token.
SWIFT_CLASS_NAMED("KVAPushNotificationsToken")
@interface KVAPushNotificationsToken : NSObject <KVAFromProtocol>
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenData The device token as provided in Data.
///
+ (void)registerWithData:(NSData * _Nonnull)deviceTokenData;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenDataHexString The device token as provided as a data hex string.
///
+ (void)registerWithDataHexString:(NSString * _Nonnull)deviceTokenDataHexString;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenData The device token as provided in Data.
///
/// \param registrarArray An array of KVAPushNotificationsTokenRegistrarProvider to which to add the token.
///
+ (void)registerWithData:(NSData * _Nonnull)deviceTokenData registrarArray:(NSArray<id <KVAPushNotificationsTokenRegistrarProvider>> * _Nullable)registrarArray;
/// Create a push notifications token using deviceTokenData and then register.
/// \param deviceTokenDataHexString The device token as provided as a data hex string.
///
/// \param registrarArray An array of KVAPushNotificationsTokenRegistrarProvider to which to add the token.
///
+ (void)registerWithDataHexString:(NSString * _Nonnull)deviceTokenDataHexString registrarArray:(NSArray<id <KVAPushNotificationsTokenRegistrarProvider>> * _Nullable)registrarArray;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// The token data as provided by the operating system.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The date that the token was provided by the operating system.
@property (nonatomic, readonly, copy) NSDate * _Nullable providedDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP14KochavaTracker42KVAPushNotificationsTokenRegistrarProvider_")
@protocol KVAPushNotificationsTokenRegistrarProvider
/// A property which conforms to protocol KVAPushNotificationsTokenRegistrar.
@property (nonatomic, readonly, strong) id <KVAPushNotificationsTokenRegistrar> _Nonnull pushNotificationsTokenRegistrar;
@end


/// A class which encapsulates a session.
SWIFT_CLASS_NAMED("KVASession")
@interface KVASession : NSObject <KVAFromProtocol>
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_didMutate_performSideEffectsWithChildObject:(id _Nullable)childObject infoDictionary:(NSDictionary * _Nullable)infoDictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A feature which provides for the measurement of sessions.
SWIFT_CLASS_NAMED("KVASessions")
@interface KVASessions : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class KVATrackerConfig;

/// The class KVATracker provides an interface between a host application and Kochava’s Attribution and Measurement servers.
/// The class KVATracker is the main interface for module KochavaTracker.  A tracker manages the exchange of data between the client and server, along with the associated tasks and network transactions.  If you have not already integrated the KochavaTracker SDK into your project, refer to our KochavaTracker iOS SDK support documentation.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// From there, the tracker proceeds to start and perform its various tasks.  This is typically done during the earliest phases of the host’s lifecycle, so that installation attribution can be quickly established and post-install events may begin to egress.
/// You may alternately create an instance.  If you do, it is your responsibility to maintain a strong reference.  And if you create multiple instances, it is your responsibility to configure each with a unique storageIdentifierString.
/// <h2>Examples</h2>
/// Example - Starting the shared instance using func <code>start(withAppGUIDString:)</code>:
/// \code
/// KVATracker.shared.start(withAppGUIDString: "_YOUR_APP_GUID_")
///
/// \endcode<h2>Features</h2>
/// <ul>
///   <li>
///     <em>Ad Network</em> (var <code>adNetwork</code>) — A feature which interfaces with Apple’s SKAdNetwork attribution system.  See class <code>KVAAdNetwork</code>.
///   </li>
///   <li>
///     <em>App Clips</em> (var appClips) — A feature which provides measurement for App Clips.  Implemented in internal class KVAAppClips.
///   </li>
///   <li>
///     <em>Apple Search Ads</em> (var appleSearchAds ) — A feature which interfaces with Apple Search Ads.  Implemented in internal class KVAAppleSearchAds.
///   </li>
///   <li>
///     <em>App Limit Ad Tracking</em> (var <code>appLimitAdTracking</code>) — A feature which may be used to limit advertising tracking from the level of the application (or host).  See class <code>KVAAppLimitAdTracking</code>.
///   </li>
///   <li>
///     <em>App Tracking Transparency</em> (var <code>appTrackingTransparency</code>) — A feature which interfaces with Apple’s App Tracking Transparency system.  See class <code>KVAAppTrackingTransparency</code>.
///   </li>
///   <li>
///     <em>Attribution</em> (var <code>attribution</code>) — A feature which provides attribution information related to the install.  See class <code>KVAAttribution</code>.
///   </li>
///   <li>
///     <em>Config</em> (var <code>config</code>) — A feature which is responsible for controlling and updating the configuration of the tracker.  This feature interfaces with Kochava’s servers to provide a server-based configuration.  This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.  See class <code>KVATrackerConfig</code>.
///   </li>
///   <li>
///     <em>Consent</em> (var <code>consent</code>) — A feature which serves as an authority related to consent for the sharing of personal data.  See class KVAConsent in module KochavaCore.
///   </li>
///   <li>
///     <em>Crash Reporting</em> (var crashReporting) — A feature which can be used to report crashes.  Implemented in class KVACrashReporting.  Note:  This feature is not being compiled into the SDK at this time.  Please enquire with your Kochava client success manager if you are interested in this feature.
///   </li>
///   <li>
///     <em>Custom Identifiers</em> (var <code>customIdentifiers</code>) — A feature which is responsible for custom identifiers.  See class <code>KVACustomIdentifiers</code>.  Register a custom identifier by calling func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
///   </li>
///   <li>
///     <em>Datapoints</em> (var dataPoints) — A feature which is responsible for the collection of datapoints.  Datapoints provide insights about the device at the times when events are generated.  Implemented in internal class KVATrackerDataPoints.
///   </li>
///   <li>
///     <em>Deeplinks</em> (var <code>deeplinks</code>) — A feature which measures deeplink activity.  See class <code>KVADeeplinks</code>.  Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
///   </li>
///   <li>
///     <em>Device Id</em> (var <code>deviceId</code>) — A feature which is responsible for the identification of a device.  The managed id is referred to as the <em>Kochava Device Id</em>.  See class <code>KVADeviceId</code>.  Get the Kochava Device Id by getting class <code>KVADeviceId</code> var <code>KVADeviceId/string</code>.
///   </li>
///   <li>
///     <em>Events</em> (var <code>events</code>) — A feature which tracks user behavior and actions beyond the install.  See class <code>KVAEvents</code>.  Create and send events using any of the methods available in class <code>KVAEvent</code>.
///   </li>
///   <li>
///     <em>General</em> (var <code>general</code>) — A feature which encapsulates all of the general aspects of a tracker not belonging to any other encapsulated features.  Implemented in internal class <code>KVATrackerGeneral</code>.
///   </li>
///   <li>
///     <em>Identity Link</em> (var <code>identityLink</code>) — A feature which is responsible for linking identities.  See class <code>KVAIdentityLink</code>.  Register an identity link by calling class <code>KVAIdentityLink</code> func <code>KVAIdentityLink/register(withNameString:identifierString:)</code>.
///   </li>
///   <li>
///     <em>Install</em> (var <code>install</code>) — A feature which provides information about the install.  The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>config</code>.  See class <code>KVAInstall</code>.
///   </li>
///   <li>
///     <em>Logging</em> (var logging) — A feature which is responsible for tracker-specific logging activities.  Implemented in internal class KVATrackerLogging.  You can set the KVALog.shared.level to control what level of log messages are printed, as well as configure various other options through module KochavaCore class KVALog.
///   </li>
///   <li>
///     <em>Networking</em> (var <code>networking</code>) — A feature which provides networking support.  The networking instance manages the exchange of data between the client and various server(s), along with the associated tasks, network transactions, adapters, and instructions.  See class KVANetworking in module KochavaCore.
///   </li>
///   <li>
///     <em>Privacy</em> (var <code>privacy</code>) — A feature which is responsible for privacy.  See class <code>KVAPrivacy</code>.  Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
///   </li>
///   <li>
///     <em>Push Notifications</em> (var <code>pushNotifications</code>) — A feature which provides for the measurement of push notifications.  See class <code>KVAPushNotifications</code>.  Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
///   </li>
///   <li>
///     <em>Sessions</em> (var sessions) — A feature which provides for the measurement of sessions.  Implemented in internal class KVASessions.
///   </li>
///   <li>
///     <em>Updates</em> (var updates) — A feature which updates the server when there are changes to tracked components.  Implemented in internal class KVATrackerUpdates.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("KVATracker")
@interface KVATracker : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVASharedPropertyProvider, KVADeeplinksProcessorProvider, KVAEventSenderProvider, KVAPrivacyProfileRegistrarProvider, KVAPushNotificationsTokenRegistrarProvider>
/// A shared instance, for convenience.
/// This is the preferred way of using a tracker.  To complete the integration you must call func <code>start(withAppGUIDString:)</code> or func <code>start(withPartnerNameString:)</code>.  You may alternatively use a constructor to create your own tracker.  The shared instance provides a few benefits.  First, it simplifies your implementation as you do not need to store an instance to the tracker somewhere in a public location in your own code.  Second, it ensures that if your code unintentionally tries to make use of the shared instance prior to configuration that you can receive a warning in the log from the tracker.  If you use your own property to store the tracker, and it is nil, then this provision would not be automatically available to you.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVATracker * _Nonnull shared;)
+ (KVATracker * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// A shared instance, for convenience— optional.
/// See var <code>shared</code>.  This variable will be nil prior to the shared instance being defaulted.  This may be used to optionally invalidate any existing shared instance without causing it to first be defaulted in the process.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVATracker * _Nullable shared_optional;)
+ (KVATracker * _Nullable)shared_optional SWIFT_WARN_UNUSED_RESULT;
/// The shared instance, an ambiguated form of the var <code>shared</code> which conforms to protocol KVASharedPropertyProvider.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id _Nonnull sharedInstance;)
+ (id _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Create a tracker.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// class MyClass:
/// {
///     let tracker = KVATracker(storageIdString: "alternate")
/// }
///
/// \endcode\param storageIdString An optional storage identifier.  The storage identifier should be left unset (nil) unless you have a reason to not use the default storage space.  See default constructor KVATracker(), or in Objective-C see convenience constructor tracker.
///
- (nonnull instancetype)initWithStorageIdString:(NSString * _Nullable)storageIdString OBJC_DESIGNATED_INITIALIZER;
/// Create a tracker.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// class MyClass:
/// {
///     let tracker = KVATracker()
/// }
///
/// \endcode
- (nonnull instancetype)init;
/// Create a tracker— using modern Objective-C syntax.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// <h2>Example</h2>
/// \code
/// KVATracker *tracker = [KVATracker trackerWithStorageIdString:@"alternate"];
///
/// \endcodenote:
/// This convenience constructor exists for Objective-C and is expected to be removed in a future version.  In Swift you should use default constructor KVATracker(storageIdString:)— or preferably, the shared instance.
/// \param storageIdString An optional storage identifier.  The storage identifier should be left unset (nil) unless you have a reason to not use the default storage space.  See default constructor KVATracker(), or in Objective-C see convenience constructor tracker.
///
+ (nonnull instancetype)trackerWithStorageIdString:(NSString * _Nullable)storageIdString SWIFT_WARN_UNUSED_RESULT;
/// Create a tracker— using modern Objective-C syntax.
/// You rarely create instances of class KVATracker.  Instead, you start the provided shared instance using one of the start instance methods.  See static var <code>shared</code>.
/// note:
/// This convenience constructor exists for Objective-C and is expected to be removed in a future version.  In Swift you should use default constructor KVATracker()— or preferably, the shared instance.
/// <h2>Example</h2>
/// \code
/// KVATracker *tracker = KVATracker.tracker;
///
/// \endcode
+ (nonnull instancetype)tracker SWIFT_WARN_UNUSED_RESULT;
/// Decode from an object.
/// \param object An object from which to decode.  This object is generally expected to be the output of kva_as(forContext: .persistentStorage).
///
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Decode from an object, supporting filling into an existing initializedObject.
/// This implementation of static func kva_from(…) is special in that this class is viewed as being primarily a container for a set of feature components.  Each of these features takes care of themselves.  At this scope we are mainly setting the fromDictionary property, which will be used as needed when the feature components are brought online.  The principle place where that takes place is when the featureArray is configured, as each feature is added to the array.  To be added this requires them to be instantiated, and, when present, decoded.  See func featureArray_configure().
/// \param object An object from which to decode.  This object is generally expected to be the output of kva_as(forContext: .persistentStorage).
///
/// \param initializedObject An initialized object.  When this is provided it will fill an existing initialized object.  When this is nil a new blank instance will be created.
///
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
/// Encode for a specified context.
/// The returned value will typically be a dictionary formatted as JSON.
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Configure (update) the instance from another object.
/// This method is used to configure the instance.  It is the same method used to configure the instance when the config response is returned.  This is referring to kvinit.  It can also be called from the host to override (or else default) various parameters.  The structure of the object you provide has the same capability as that which the server may return.  Additionally you can wrap the parameters you provide in objects $override$, $override.append$, $default$, or $default.append$, to indicate how these options are treated relative to the server’s options.
/// $override$:  Elements within this object will override any options of the same name specified by the server.
/// $override.append$:  Elements within this object will append/override any previously established $override$.  $override$ does not need to be used first.
/// $default$:  Elements within this object will serve as a default for any options of the same name when not specified by the server.
/// $default.append$:  Elements within this object will append/override any previously established $default$.  $default$ does not need to be used first.
/// The following example will deny the collection of two datapoints, the idfa and idfv.  Ordinarily the best way to do this is through the Kochava dashboard, where these can be controlled within multiple version(s) of an app already in production.  However, if at build time you wanted to explicitly override server-side control, such that these two items effectively always appear in the deny datapoints list, the following code would do so:
/// <h2>Example</h2>
/// \code
/// // trackerConfigureObject
/// let trackerConfigureObject =
/// [
///     "$override.append$":
///     [
///         "privacy":
///         [
///             "deny_datapoints":
///             [
///                 "idfa",
///                 "idfv"
///             ]
///         ]
///     ]
/// ]
///
/// // KVATracker
/// KVATracker.shared.configure(with: trackerConfigureObject, context: KVAContext.host)
/// KVATracker.shared.start(withAppGUIDString: "koapple-sdk-h-random-sn4i")
///
/// \endcode\param object An object from which to configure the instance.  This is most commonly a JSON object.
///
/// \param context The context from which the object was provided.  In rare cases this may have some bearing on the proper interpretation of what was provided.
///
- (void)configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Configure (update) the instance from another object.
/// This function is equivalent to func configure(with:context) however this does not first dispatch to the globalSerial queue.  It is the protocol conformance of KVAConfigureWithProtocol.  You should not use this function directly unless you have a specific need to not perform the preferred dispatch.
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Start the tracker with an appGUIDString.
/// You may start a tracker with either an appGUIDString or a partnerNameString.  Most commonly this is done with an appGUIDString.  See also func <code>start(withPartnerNameString:)</code>.
/// <h2>Example</h2>
/// \code
/// KVATracker.shared.start(withAppGUIDString: "_YOUR_KOCHAVA_APP_GUID_")
///
/// \endcode\param appGUIDString A Kochava app GUID.
///
- (void)startWithAppGUIDString:(NSString * _Nonnull)appGUIDString;
/// Start the tracker with a partnerNameString.
/// You may start a tracker with either an appGUIDString or a partnerNameString.  Most commonly this is done with an appGUIDString.  See also func <code>start(withAppGUIDString:)</code>.
/// <h2>Examples</h2>
/// \code
/// KVATracker.shared.start(withPartnerNameString: "_YOUR_KOCHAVA_PARTNER_NAME_")
///
/// \endcode\param partnerNameString A Kochava partner name.
///
- (void)startWithPartnerNameString:(NSString * _Nonnull)partnerNameString;
/// Start the tracker.
/// An appGUIDString or partnerNameString must be set prior to making this call.  To do this, instead see func start(withAppGUIDString:) and func start(withPartnerNameString:).  This method is called by those two methods, and provides public conformance to protocol KVAStartable.  This method can be used to start an instance of a tracker which was created from decoded JSON.
- (void)start;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Execute an advanced instruction.
/// \param identifierString An identifier for the advanced instruction.
///
/// \param valueObject A value object for the advanced instruction.
///
- (void)executeAdvancedInstructionWithIdentifierString:(NSString * _Nonnull)identifierString valueObject:(id _Nullable)valueObject;
/// Invalidate the instance.
/// This is similar to allowing an instance of the tracker deallocate, but it can also be used on the shared instance.  It will additionally signal certain sub-systems to invalidate themselves, which can result in a more assured and immediate halt.  The scope of this invalidation is not absolute.  Certain sub-systems will continue to run for a period of time until they may gracefully complete.  When using this method with the shared instance, you are guaranteed to be re-defaulted a new instance the next time it is referenced, and you may immediately move forward to re-configure it.
/// When you are not using Intelligent Consent Management, this method can be used to signal that the tracker may no longer run following consent having been denied.  When used this way, you may re-configure a tracker if/when consent is granted.
- (void)invalidate;
/// Invalidate the instance.
/// See func <code>invalidate()</code>
- (void)invalidateWithPrintLogMessageBool:(BOOL)printLogMessageBool;
/// A feature which interfaces with Apple’s SKAdNetwork attribution system.
@property (nonatomic, readonly, strong) KVAAdNetwork * _Nullable adNetwork;
/// A feature which may be used to limit advertising tracking from the level of the application (or host).
@property (nonatomic, readonly, strong) KVAAppLimitAdTracking * _Nonnull appLimitAdTracking;
/// A boolean which indicates if you want to limit ad tracking at the application level (convenience).
/// This feature is related to the Limit Ad Tracking feature which is typically found on an Apple device under Settings, Privacy, Advertising.  In the same way that you can limit ad tracking through that setting, this feature provides a second and independent means for the host app to limit ad tracking by asking the user directly.  A value of false from either this feature or Apple’s will result in the limiting of ad tracking.
@property (nonatomic) BOOL appLimitAdTrackingBool;
/// A feature which interfaces with Apple’s App Tracking Transparency system.
@property (nonatomic, readonly, strong) KVAAppTrackingTransparency * _Nonnull appTrackingTransparency;
/// A feature which provides attribution information related to the install.
@property (nonatomic, readonly, strong) KVAAttribution * _Nonnull attribution;
/// A feature which is responsible for controlling and updating the configuration of the tracker.
/// This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.
@property (nonatomic, readonly, strong) KVATrackerConfig * _Nonnull config;
/// A feature which serves as an authority related to consent for the sharing of personal data.
/// Data sharing privacy laws such as GDPR require consent to be obtained before certain kinds of personal data may be collected or calculated, kept in memory, persisted or retained in persistent storage, and/or shared with partners.  During the natural lifecycle, there are times where partners may be added and cause the consent status to fall back to an unknown state.  Later the user may again be prompted and the consent status may (or may not) again come to be known.  All of this is predicated upon whether or not consent is required, which is governed by a variety of factors such as location.
@property (nonatomic, readonly, strong) KVAConsent * _Nonnull consent;
/// A feature which is responsible for custom identifiers.
/// Register a custom identifier by calling class <code>KVACustomIdentifiers</code> func <code>KVACustomIdentifiers/register(withNameString:identifierString:)</code>.
@property (nonatomic, readonly, strong) KVACustomIdentifiers * _Nonnull customIdentifiers;
/// A feature which measures deeplink activity.
/// Create and process a basic deeplink (which is a wrapper for Apple’s url) by calling class <code>KVADeeplink</code> func <code>KVADeeplink/process(withURL:completionHandler:)</code>.
@property (nonatomic, readonly, strong) KVADeeplinks * _Nonnull deeplinks;
/// A feature which is responsible for the identification of a device.
/// The managed id is referred to as the <em>Kochava Device Id</em>.  Get the Kochava Device Id by getting class <code>KVADeviceId</code> var <code>KVADeviceId/string</code>.
@property (nonatomic, readonly, strong) KVADeviceId * _Nonnull deviceId;
/// A property containing the unique device ID that was generated when the tracker was first initialized on the current install (convenience).
@property (nonatomic, readonly, copy) NSString * _Nullable deviceIdString;
/// A feature which is responsible for linking identities.
/// Register an identity link by calling class <code>KVAIdentityLink</code> func <code>KVAIdentityLink/register(withNameString:identifierString:)</code>.
@property (nonatomic, readonly, strong) KVAIdentityLink * _Nonnull identityLink;
/// A feature which provides information about the install.
/// The install is automatically sent to Kochava’s servers after starting the tracker, and after the retrieval of the tracker’s configuration in feature var <code>config</code>.
@property (nonatomic, readonly, strong) KVAInstall * _Nonnull install;
/// A feature which provides networking support.
/// The networking instance manages the exchange of data between the client and various server(s), along with the associated tasks, network transactions, adapters, and instructions.  See class KVANetworking in module KochavaCore.
@property (nonatomic, readonly, strong) KVANetworking * _Nonnull networking;
/// A feature which is responsible for privacy.
/// Privacy profiles are automatically registered from the server.  Create and register a privacy profile locally by calling class <code>KVAPrivacyProfile</code> func <code>KVAPrivacyProfile/register(withNameString:payloadKeyStringArray:)</code>.
@property (nonatomic, readonly, strong) KVAPrivacy * _Nonnull privacy;
/// A feature which provides for the measurement of push notifications.
/// Create and register a push notifications token (which is a wrapper for Apple’s device token data) by calling class <code>KVAPushNotificationsToken</code> func  <code>KVAPushNotificationsToken/register(withData:)</code>.
@property (nonatomic, readonly, strong) KVAPushNotifications * _Nonnull pushNotifications;
@property (nonatomic, readonly, strong) id <KVADeeplinksProcessor> _Nullable deeplinksProcessor;
@property (nonatomic, readonly, strong) id <KVAEventSender> _Nonnull eventSender;
@property (nonatomic, readonly, strong) id <KVAPrivacyProfileRegistrar> _Nonnull privacyProfileRegistrar;
@property (nonatomic, readonly, strong) id <KVAPushNotificationsTokenRegistrar> _Nonnull pushNotificationsTokenRegistrar;
/// A string used as a  storage identifier for the shared instance.
/// This is used to further qualify where in persistent storage the information for this instance is stored.  This property should not be used except in very specific circumstances.  Please contact your client success representative if you are interested in using this.  You would set this value to a short unique string consisting of regular alphanumeric characters.  Following deployment with a given storage identifer this should never be changed except to represent an entirely new integration.  If used, it is absolutely imperative that this value be consistently set prior to accessing the shared instance for the first time.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable sharedStorageIdString;)
+ (NSString * _Nullable)sharedStorageIdString SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedStorageIdString:(NSString * _Nullable)sharedStorageIdString;
/// A boolean which when true causes the instance to sleep.
/// The default is false.  When set to true, this causes tasks to effectively be suspended until this condition is lifted.  While this is set to true, tasks are not lost per-say;  however, if a task may have otherwise occurred multiple times, it may be represented only once once the condition is lifted.
@property (nonatomic) BOOL sleepBool;
/// A boolean indicating whether or not the instance has been started.
@property (nonatomic, readonly) BOOL startedBool;
@end


@interface KVATracker (SWIFT_EXTENSION(KochavaTracker)) <JSExport>
@end


/// A feature which is responsible for controlling and updating the configuration of the tracker.
/// This feature interfaces with Kochava’s servers to provide a server-based configuration.  This is sometimes referred to by the name of the service which provides the configuration, <em>kvinit</em>.
SWIFT_CLASS_NAMED("KVATrackerConfig")
@interface KVATrackerConfig : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for the collection of datapoints.
SWIFT_CLASS_NAMED("KVATrackerDataPoints")
@interface KVATrackerDataPoints : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAKeyable, KVAMutableDelegator>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which encapsulates all of the general aspects of a tracker not belonging to any other encapsulated features.
SWIFT_CLASS_NAMED("KVATrackerGeneral")
@interface KVATrackerGeneral : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end


/// A feature which is responsible for tracker-specific logging activities.
/// You can set the KVALog.shared.level to control what level of log messages are printed, as well as configure various other options through module KochavaCore class KVALog.
SWIFT_CLASS_NAMED("KVATrackerLogging")
@interface KVATrackerLogging : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

@class KVAProduct;

/// A class which defines the tracker product.
/// A product in this context generally refers to the result of a build.
/// note:
/// This is currently overridden to be a subclass of NSObject rather than KVAProduct so that it can be represented in Objective-C.  If you use KVAProduct it will still build, but the automatic module registration will fail to locate the class.  You can see early evidence of the problem if you also make the shared property be of the class type, where the compiler will say that it cannot use @objc because it cannot be expressed in Objective-C.  This is apparently a problem that Swift has providing Objective-C compatibility to Swift classes which subclass other Swift classes across modules.  For example, KVACoreProduct does not have this problem, presumably because it’s in the same module as KVAProduct.  In order to convert this class to subclass KVAProduct, or to subsequently allow shared to be of the class’ type, a means of registering/loading the class as a Swift-only class would be required.  More importantly, however, we’d need to give up public Objective-C support.  Since that doesn’t seem possible, the only alternative would be that Apple fixes this issue and provides the necessary support, assuming that’s possible.
SWIFT_CLASS_NAMED("KVATrackerProduct")
@interface KVATrackerProduct : NSObject <KVASharedPropertyProvider>
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAProduct * _Nonnull shared;)
+ (KVAProduct * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id _Nonnull sharedInstance;)
+ (id _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the parameters for the tracker product.
SWIFT_CLASS("_TtC14KochavaTracker23KVATrackerProductParams")
@interface KVATrackerProductParams : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A feature which updates the server when there are changes to tracked components.
SWIFT_CLASS_NAMED("KVATrackerUpdates")
@interface KVATrackerUpdates : NSObject <KVAConfigureWithProtocol, KVAFromProtocol, KVAFromWithInitializedObjectProtocol, KVAInvalidatable, KVAKeyable, KVAMutableDelegator, KVAStartable>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (NSObject * _Nullable)keyForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
- (void)kva_configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
- (void)start;
- (void)invalidate;
/// A mutable delegate.
@property (nonatomic, weak) id <KVAMutable> _Nullable mutableDelegate;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
